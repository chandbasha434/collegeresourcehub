{"file_contents":{"design_guidelines.md":{"content":"# College Resource Hub Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from productivity platforms like Notion and Linear, combined with educational platforms like Khan Academy for a clean, academic-focused interface that prioritizes usability and content discovery.\n\n## Core Design Elements\n\n### A. Color Palette\n**Primary Greys (Dark Mode)**:\n- Background: 220 8% 8% (deep charcoal)\n- Surface: 220 8% 12% (elevated surfaces)\n- Border: 220 8% 18% (subtle divisions)\n- Text Primary: 220 8% 95% (high contrast)\n- Text Secondary: 220 8% 70% (muted content)\n\n**Primary Greys (Light Mode)**:\n- Background: 220 8% 98% (warm white)\n- Surface: 220 8% 100% (pure white)\n- Border: 220 8% 88% (soft divisions)\n- Text Primary: 220 8% 15% (dark charcoal)\n- Text Secondary: 220 8% 45% (medium grey)\n\n**Accent Colors**:\n- Primary: 210 85% 55% (professional blue for CTAs)\n- Success: 142 76% 45% (green for ratings/uploads)\n- Warning: 38 92% 50% (amber for notifications)\n- Error: 0 84% 60% (red for validation)\n\n### B. Typography\n- **Primary Font**: Inter (Google Fonts) - clean, readable for UI text\n- **Secondary Font**: JetBrains Mono (Google Fonts) - for file names and technical content\n- **Hierarchy**: text-xs to text-3xl, with font-medium for headings, font-normal for body\n\n### C. Layout System\n**Spacing Primitives**: Tailwind units of 2, 4, 6, 8, 12, 16\n- Micro spacing: p-2, m-2 (component internals)\n- Standard spacing: p-4, m-4, gap-4 (card padding, basic margins)\n- Section spacing: p-8, m-8 (page sections, major components)\n- Layout spacing: p-12, p-16 (page containers, hero sections)\n\n### D. Component Library\n\n**Navigation**:\n- Clean sidebar with grey-on-grey icons\n- Breadcrumb navigation for deep category browsing\n- Search bar with subtle grey background and blue focus states\n\n**Cards & Content**:\n- Resource cards with soft grey backgrounds and subtle shadows\n- Rating stars in gold/amber for warmth against grey palette\n- File type icons using Heroicons library\n- Upload areas with dashed grey borders\n\n**Forms & Inputs**:\n- Minimal input styling with grey borders and blue focus rings\n- Dropdown menus with grey backgrounds and subtle shadows\n- Tag inputs with grey pill-style tags\n\n**Data Display**:\n- Clean tables with alternating grey row backgrounds\n- Statistics cards with large numbers and descriptive labels\n- Progress indicators for upload status\n\n**Interactive Elements**:\n- Primary buttons: blue background with white text\n- Secondary buttons: outline style with grey borders\n- Icon buttons: subtle grey hover states\n\n### E. Animations\n**Minimal Motion**: \n- Subtle hover transitions (150ms duration)\n- Page transitions with fade effects\n- Loading states with grey skeleton screens\n- No distracting animations during core workflows\n\n## Key Design Principles\n\n1. **Academic Professionalism**: Clean, distraction-free interface that feels serious and trustworthy\n2. **Content-First**: Typography and layout prioritize readability and information hierarchy\n3. **Subtle Sophistication**: Premium feel through careful use of spacing, typography, and restrained color\n4. **Functional Beauty**: Every design element serves a clear purpose in the user's academic workflow\n5. **Accessible Contrast**: All grey combinations meet WCAG AA standards for text readability\n\n## Images\nNo large hero images required. Focus on:\n- Small avatar placeholders for user profiles\n- File type icons and thumbnails for uploaded resources\n- Empty state illustrations in light grey tones\n- Simple iconography throughout the interface using Heroicons\n\nThis creates a premium, academic-focused platform that feels both professional and approachable for student users.","size_bytes":3700},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"system-ui\", \"sans-serif\"],\n        serif: [\"Georgia\", \"serif\"],\n        mono: [\"JetBrains Mono\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4076},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { z } from \"zod\";\nimport { \n  insertResourceSchema, \n  insertRatingSchema, \n  insertFavoriteSchema,\n  insertTagSchema \n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Configure multer for file uploads\n  const uploadDir = path.join(process.cwd(), 'uploads');\n  if (!fs.existsSync(uploadDir)) {\n    fs.mkdirSync(uploadDir, { recursive: true });\n  }\n  \n  const upload = multer({\n    storage: multer.diskStorage({\n      destination: (req: any, file, cb) => {\n        const userId = req.user?.claims?.sub;\n        const userUploadDir = path.join(uploadDir, userId || 'anonymous');\n        if (!fs.existsSync(userUploadDir)) {\n          fs.mkdirSync(userUploadDir, { recursive: true });\n        }\n        cb(null, userUploadDir);\n      },\n      filename: (req, file, cb) => {\n        const timestamp = Date.now();\n        const sanitizedName = file.originalname.replace(/[^a-zA-Z0-9.\\-_]/g, '_');\n        cb(null, `${timestamp}-${sanitizedName}`);\n      }\n    }),\n    limits: {\n      fileSize: 10 * 1024 * 1024 // 10MB limit\n    },\n    fileFilter: (req, file, cb) => {\n      // Allow PDF, Word docs, and images\n      const allowedTypes = [\n        'application/pdf',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        'image/jpeg',\n        'image/jpg', \n        'image/png'\n      ];\n      if (allowedTypes.includes(file.mimetype)) {\n        cb(null, true);\n      } else {\n        cb(new Error('Invalid file type. Only PDF, Word documents, and images are allowed.'));\n      }\n    }\n  });\n\n  // Auth middleware\n  await setupAuth(app);\n  \n  // Admin middleware - checks if user is an admin\n  const isAdmin = async (req: any, res: any, next: any) => {\n    try {\n      if (!req.user || !req.user.claims || !req.user.claims.sub) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      next();\n    } catch (error) {\n      console.error(\"Error in admin middleware:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  };\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      // Validate that user claims exist and have required fields\n      if (!req.user || !req.user.claims || !req.user.claims.sub) {\n        console.error(\"Invalid user session - missing claims\");\n        return res.status(401).json({ message: \"Invalid session\" });\n      }\n      \n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        console.error(\"User not found in database:\", userId);\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Protected route example - can be used for testing auth\n  app.get(\"/api/protected\", isAuthenticated, async (req: any, res) => {\n    const userId = req.user?.claims?.sub;\n    res.json({ \n      message: \"This is a protected route\", \n      userId,\n      user: req.user.claims \n    });\n  });\n\n  // Resource CRUD Routes\n  \n  // GET /api/resources - Get filtered resources\n  app.get('/api/resources', async (req, res) => {\n    try {\n      const {\n        limit,\n        offset,\n        subject,\n        semester,\n        minRating,\n        search,\n        sortBy,\n        userId\n      } = req.query;\n      \n      const resources = await storage.getResources({\n        limit: limit ? parseInt(limit as string) : undefined,\n        offset: offset ? parseInt(offset as string) : undefined,\n        subject: subject as string,\n        semester: semester as string,\n        minRating: minRating ? parseFloat(minRating as string) : undefined,\n        search: search as string,\n        sortBy: sortBy as 'newest' | 'oldest' | 'rating' | 'downloads' | 'relevance',\n        userId: userId as string\n      });\n      \n      res.json(resources);\n    } catch (error) {\n      console.error(\"Error fetching resources:\", error);\n      res.status(500).json({ message: \"Failed to fetch resources\" });\n    }\n  });\n\n  // GET /api/resources/:id - Get resource with details\n  app.get('/api/resources/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const resource = await storage.getResourceWithDetails(id);\n      \n      if (!resource) {\n        return res.status(404).json({ message: \"Resource not found\" });\n      }\n      \n      res.json(resource);\n    } catch (error) {\n      console.error(\"Error fetching resource:\", error);\n      res.status(500).json({ message: \"Failed to fetch resource\" });\n    }\n  });\n\n  // POST /api/resources - Create new resource with file upload (protected)\n  app.post('/api/resources', isAuthenticated, upload.single('file'), async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      \n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n      \n      // Parse tags if provided\n      let tags: string[] = [];\n      if (req.body.tags) {\n        try {\n          tags = JSON.parse(req.body.tags);\n        } catch (e) {\n          console.warn(\"Failed to parse tags:\", e);\n        }\n      }\n      \n      // Prepare resource data\n      const resourceData = insertResourceSchema.parse({\n        title: req.body.title,\n        description: req.body.description || null,\n        subject: req.body.subject,\n        semester: req.body.semester || null,\n        fileName: req.file.originalname,\n        fileSize: req.file.size,\n        fileType: req.file.mimetype,\n        filePath: req.file.path,\n        uploadedById: userId\n      });\n      \n      const resource = await storage.createResource(resourceData);\n      \n      // Handle tags if provided\n      if (tags.length > 0) {\n        try {\n          for (const tagName of tags) {\n            // Create or find the tag\n            let tag = await storage.getTagByName(tagName);\n            if (!tag) {\n              const newTag = insertTagSchema.parse({ name: tagName });\n              tag = await storage.createTag(newTag);\n            }\n            \n            // Associate tag with resource\n            await storage.addTagToResource(resource.id, tag.id);\n          }\n        } catch (tagError) {\n          console.warn(\"Failed to process some tags:\", tagError);\n          // Don't fail the whole request for tag errors\n        }\n      }\n      \n      res.status(201).json(resource);\n    } catch (error) {\n      console.error(\"Error creating resource:\", error);\n      \n      // Clean up uploaded file if resource creation failed\n      if (req.file && fs.existsSync(req.file.path)) {\n        try {\n          fs.unlinkSync(req.file.path);\n        } catch (cleanupError) {\n          console.error(\"Failed to cleanup uploaded file:\", cleanupError);\n        }\n      }\n      \n      if (error instanceof Error && error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid resource data\", errors: (error as any).errors });\n      }\n      \n      res.status(500).json({ message: \"Failed to create resource\" });\n    }\n  });\n\n  // PUT /api/resources/:id - Update resource (protected, owner only)\n  app.put('/api/resources/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { id } = req.params;\n      \n      // Check if resource exists and user owns it\n      const existingResource = await storage.getResource(id);\n      if (!existingResource) {\n        return res.status(404).json({ message: \"Resource not found\" });\n      }\n      \n      if (existingResource.uploadedById !== userId) {\n        return res.status(403).json({ message: \"Not authorized to update this resource\" });\n      }\n      \n      const updates = {\n        title: req.body.title,\n        description: req.body.description,\n        subject: req.body.subject,\n        semester: req.body.semester\n      };\n      \n      const updatedResource = await storage.updateResource(id, updates);\n      res.json(updatedResource);\n    } catch (error) {\n      console.error(\"Error updating resource:\", error);\n      res.status(500).json({ message: \"Failed to update resource\" });\n    }\n  });\n\n  // DELETE /api/resources/:id - Delete resource (protected, owner only)\n  app.delete('/api/resources/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { id } = req.params;\n      \n      // Check if resource exists and user owns it\n      const existingResource = await storage.getResource(id);\n      if (!existingResource) {\n        return res.status(404).json({ message: \"Resource not found\" });\n      }\n      \n      if (existingResource.uploadedById !== userId) {\n        return res.status(403).json({ message: \"Not authorized to delete this resource\" });\n      }\n      \n      const success = await storage.deleteResource(id);\n      if (success) {\n        res.json({ message: \"Resource deleted successfully\" });\n      } else {\n        res.status(500).json({ message: \"Failed to delete resource\" });\n      }\n    } catch (error) {\n      console.error(\"Error deleting resource:\", error);\n      res.status(500).json({ message: \"Failed to delete resource\" });\n    }\n  });\n\n  // GET /api/resources/:id/download - Download file and increment download count\n  app.get('/api/resources/:id/download', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Check if resource exists\n      const resource = await storage.getResource(id);\n      if (!resource) {\n        return res.status(404).json({ message: \"Resource not found\" });\n      }\n      \n      // Check if file exists on filesystem\n      if (!fs.existsSync(resource.filePath)) {\n        console.error(`File not found on filesystem: ${resource.filePath}`);\n        return res.status(404).json({ message: \"File not found on server\" });\n      }\n      \n      // Increment download count\n      await storage.incrementDownloadCount(id);\n      \n      // Use res.download for secure file serving with proper header handling\n      res.download(resource.filePath, resource.fileName, (error) => {\n        if (error) {\n          console.error('Error downloading file:', error);\n          if (!res.headersSent) {\n            res.status(500).json({ message: \"Error downloading file\" });\n          }\n        }\n      });\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ message: \"Failed to download file\" });\n      }\n    }\n  });\n  \n\n  // Rating Routes\n\n  // GET /api/resources/:id/ratings - Get ratings for resource\n  app.get('/api/resources/:id/ratings', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const ratings = await storage.getRatingsForResource(id);\n      res.json(ratings);\n    } catch (error) {\n      console.error(\"Error fetching ratings:\", error);\n      res.status(500).json({ message: \"Failed to fetch ratings\" });\n    }\n  });\n\n  // POST /api/resources/:id/ratings - Create/update rating (protected)\n  app.post('/api/resources/:id/ratings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { id } = req.params;\n      \n      const ratingData = insertRatingSchema.parse({\n        ...req.body,\n        resourceId: id,\n        userId\n      });\n      \n      const rating = await storage.createOrUpdateRating(ratingData);\n      res.json(rating);\n    } catch (error) {\n      console.error(\"Error creating/updating rating:\", error);\n      res.status(500).json({ message: \"Failed to create/update rating\" });\n    }\n  });\n\n  // DELETE /api/resources/:id/ratings - Delete user's rating (protected)\n  app.delete('/api/resources/:id/ratings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { id } = req.params;\n      \n      const success = await storage.deleteRating(id, userId);\n      if (success) {\n        res.json({ message: \"Rating deleted successfully\" });\n      } else {\n        res.status(404).json({ message: \"Rating not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error deleting rating:\", error);\n      res.status(500).json({ message: \"Failed to delete rating\" });\n    }\n  });\n\n  // Favorite Routes\n\n  // GET /api/users/me/favorites - Get user's favorites (protected)\n  app.get('/api/users/me/favorites', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const favorites = await storage.getUserFavorites(userId);\n      res.json(favorites);\n    } catch (error) {\n      console.error(\"Error fetching favorites:\", error);\n      res.status(500).json({ message: \"Failed to fetch favorites\" });\n    }\n  });\n\n  // POST /api/resources/:id/favorites - Add to favorites (protected)\n  app.post('/api/resources/:id/favorites', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { id } = req.params;\n      \n      const favoriteData = insertFavoriteSchema.parse({\n        userId,\n        resourceId: id\n      });\n      \n      const favorite = await storage.addFavorite(favoriteData);\n      res.json(favorite);\n    } catch (error) {\n      console.error(\"Error adding favorite:\", error);\n      res.status(500).json({ message: \"Failed to add favorite\" });\n    }\n  });\n\n  // DELETE /api/resources/:id/favorites - Remove from favorites (protected)\n  app.delete('/api/resources/:id/favorites', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { id } = req.params;\n      \n      const success = await storage.removeFavorite(userId, id);\n      if (success) {\n        res.json({ message: \"Favorite removed successfully\" });\n      } else {\n        res.status(404).json({ message: \"Favorite not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error removing favorite:\", error);\n      res.status(500).json({ message: \"Failed to remove favorite\" });\n    }\n  });\n\n  // Tag Routes\n\n  // GET /api/tags - Get all tags\n  app.get('/api/tags', async (req, res) => {\n    try {\n      const tags = await storage.getTags();\n      res.json(tags);\n    } catch (error) {\n      console.error(\"Error fetching tags:\", error);\n      res.status(500).json({ message: \"Failed to fetch tags\" });\n    }\n  });\n\n  // GET /api/resources/:id/tags - Get tags for resource\n  app.get('/api/resources/:id/tags', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const tags = await storage.getTagsForResource(id);\n      res.json(tags);\n    } catch (error) {\n      console.error(\"Error fetching resource tags:\", error);\n      res.status(500).json({ message: \"Failed to fetch resource tags\" });\n    }\n  });\n\n  // POST /api/resources/:id/tags - Add tag to resource (protected, owner only)\n  app.post('/api/resources/:id/tags', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { id } = req.params;\n      const { tagName } = req.body;\n      \n      // Check if resource exists and user owns it\n      const existingResource = await storage.getResource(id);\n      if (!existingResource) {\n        return res.status(404).json({ message: \"Resource not found\" });\n      }\n      \n      if (existingResource.uploadedById !== userId) {\n        return res.status(403).json({ message: \"Not authorized to modify this resource\" });\n      }\n      \n      // Get or create tag\n      const tag = await storage.getOrCreateTag(tagName);\n      \n      // Add tag to resource\n      await storage.addTagToResource(id, tag.id);\n      \n      res.json(tag);\n    } catch (error) {\n      console.error(\"Error adding tag to resource:\", error);\n      res.status(500).json({ message: \"Failed to add tag to resource\" });\n    }\n  });\n\n  // DELETE /api/resources/:id/tags/:tagId - Remove tag from resource (protected, owner only)\n  app.delete('/api/resources/:id/tags/:tagId', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { id, tagId } = req.params;\n      \n      // Check if resource exists and user owns it\n      const existingResource = await storage.getResource(id);\n      if (!existingResource) {\n        return res.status(404).json({ message: \"Resource not found\" });\n      }\n      \n      if (existingResource.uploadedById !== userId) {\n        return res.status(403).json({ message: \"Not authorized to modify this resource\" });\n      }\n      \n      await storage.removeTagFromResource(id, tagId);\n      res.json({ message: \"Tag removed from resource\" });\n    } catch (error) {\n      console.error(\"Error removing tag from resource:\", error);\n      res.status(500).json({ message: \"Failed to remove tag from resource\" });\n    }\n  });\n\n  // Admin Routes\n  \n  // GET /api/admin/users - Get all users (admin only)\n  app.get('/api/admin/users', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n  \n  // GET /api/admin/resources - Get all resources (admin only)\n  app.get('/api/admin/resources', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const resources = await storage.getAllResources();\n      res.json(resources);\n    } catch (error) {\n      console.error(\"Error fetching admin resources:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin resources\" });\n    }\n  });\n  \n  // PUT /api/admin/resources/:id/status - Toggle resource active status (admin only)\n  app.put('/api/admin/resources/:id/status', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Validate request body with Zod\n      const statusUpdateSchema = z.object({\n        isActive: z.boolean()\n      });\n      \n      const validation = statusUpdateSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid request data\", \n          errors: validation.error.errors \n        });\n      }\n      \n      const { isActive } = validation.data;\n      \n      const resource = await storage.getResource(id);\n      if (!resource) {\n        return res.status(404).json({ message: \"Resource not found\" });\n      }\n      \n      const updatedResource = await storage.updateResource(id, { isActive });\n      res.json(updatedResource);\n    } catch (error) {\n      console.error(\"Error updating resource status:\", error);\n      res.status(500).json({ message: \"Failed to update resource status\" });\n    }\n  });\n  \n  // GET /api/admin/stats - Get admin dashboard stats\n  app.get('/api/admin/stats', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const stats = await storage.getAdminStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching admin stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin stats\" });\n    }\n  });\n\n  // Stats Routes\n\n  // GET /api/stats - Get dashboard stats\n  app.get('/api/stats', async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // GET /api/users/me/stats - Get user stats (protected)\n  app.get('/api/users/me/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const stats = await storage.getUserStats(userId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching user stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch user stats\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":20526},"server/storage.ts":{"content":"import { \n  users, \n  resources,\n  ratings,\n  tags,\n  resourceTags,\n  favorites,\n  type User, \n  type InsertUser,\n  type UpsertUser,\n  type Resource,\n  type InsertResource,\n  type Rating,\n  type InsertRating,\n  type Tag,\n  type InsertTag,\n  type Favorite,\n  type InsertFavorite,\n  type ResourceWithDetails\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, ilike, gte, sql, count } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (including Replit Auth required methods)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>; // Required by Replit Auth\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Resource operations\n  getResource(id: string): Promise<Resource | undefined>;\n  getResourceWithDetails(id: string): Promise<ResourceWithDetails | undefined>;\n  getResources(options?: {\n    limit?: number;\n    offset?: number;\n    subject?: string;\n    semester?: string;\n    minRating?: number;\n    search?: string;\n    sortBy?: 'newest' | 'oldest' | 'rating' | 'downloads' | 'relevance';\n    userId?: string; // For user's own resources\n  }): Promise<Resource[]>;\n  createResource(resource: InsertResource): Promise<Resource>;\n  updateResource(id: string, updates: Partial<Resource>): Promise<Resource | undefined>;\n  deleteResource(id: string): Promise<boolean>;\n  incrementDownloadCount(id: string): Promise<void>;\n  \n  // Rating operations\n  getRating(resourceId: string, userId: string): Promise<Rating | undefined>;\n  getRatingsForResource(resourceId: string): Promise<Rating[]>;\n  createOrUpdateRating(rating: InsertRating): Promise<Rating>;\n  deleteRating(resourceId: string, userId: string): Promise<boolean>;\n  updateResourceRatingStats(resourceId: string): Promise<void>;\n  \n  // Tag operations\n  getTag(id: string): Promise<Tag | undefined>;\n  getTagByName(name: string): Promise<Tag | undefined>;\n  getTags(): Promise<Tag[]>;\n  createTag(tag: InsertTag): Promise<Tag>;\n  getOrCreateTag(name: string): Promise<Tag>;\n  \n  // Resource-Tag operations\n  addTagToResource(resourceId: string, tagId: string): Promise<void>;\n  removeTagFromResource(resourceId: string, tagId: string): Promise<void>;\n  getTagsForResource(resourceId: string): Promise<Tag[]>;\n  \n  // Favorite operations\n  getFavorite(userId: string, resourceId: string): Promise<Favorite | undefined>;\n  getUserFavorites(userId: string): Promise<Resource[]>;\n  addFavorite(favorite: InsertFavorite): Promise<Favorite>;\n  removeFavorite(userId: string, resourceId: string): Promise<boolean>;\n  \n  // Stats operations\n  getDashboardStats(): Promise<{\n    totalResources: number;\n    totalDownloads: number;\n    averageRating: number;\n    activeUsers: number;\n  }>;\n  getUserStats(userId: string): Promise<{\n    uploadedCount: number;\n    totalDownloads: number;\n    averageRating: number;\n  }>;\n  \n  // Admin operations\n  getAllUsers(): Promise<User[]>;\n  getAllResources(): Promise<Resource[]>;\n  getAdminStats(): Promise<{\n    totalUsers: number;\n    totalResources: number;\n    totalDownloads: number;\n    averageRating: number;\n    activeUsers: number;\n    inactiveResources: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    if (!username) return undefined;\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    if (!email) return undefined;\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...insertUser,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .returning();\n    return user;\n  }\n\n  // Resource operations\n  async getResource(id: string): Promise<Resource | undefined> {\n    const [resource] = await db.select().from(resources).where(eq(resources.id, id));\n    return resource || undefined;\n  }\n\n  async getResourceWithDetails(id: string): Promise<ResourceWithDetails | undefined> {\n    const result = await db.query.resources.findFirst({\n      where: eq(resources.id, id),\n      with: {\n        uploadedBy: true,\n        ratings: true,\n        resourceTags: {\n          with: {\n            tag: true\n          }\n        }\n      }\n    });\n    \n    if (!result) return undefined;\n    \n    return {\n      ...result,\n      averageRating: parseFloat(result.averageRating || \"0\"),\n      ratingCount: result.ratingCount || 0,\n    } as ResourceWithDetails;\n  }\n\n  async getResources(options: {\n    limit?: number;\n    offset?: number;\n    subject?: string;\n    semester?: string;\n    minRating?: number;\n    search?: string;\n    sortBy?: 'newest' | 'oldest' | 'rating' | 'downloads' | 'relevance';\n    userId?: string;\n  } = {}): Promise<Resource[]> {\n    const {\n      limit = 50,\n      offset = 0,\n      subject,\n      semester,\n      minRating,\n      search,\n      sortBy = 'newest',\n      userId\n    } = options;\n\n    // Build conditions array\n    const conditions = [eq(resources.isActive, true)];\n    \n    if (subject) {\n      conditions.push(eq(resources.subject, subject));\n    }\n    \n    if (semester) {\n      conditions.push(eq(resources.semester, semester));\n    }\n    \n    if (minRating) {\n      conditions.push(gte(resources.averageRating, minRating.toString()));\n    }\n    \n    if (search) {\n      conditions.push(\n        sql`(${resources.title} ILIKE ${`%${search}%`} OR ${resources.description} ILIKE ${`%${search}%`})`\n      );\n    }\n    \n    if (userId) {\n      conditions.push(eq(resources.uploadedById, userId));\n    }\n\n    // Build where clause\n    const whereClause = conditions.length === 1 ? conditions[0] : and(...conditions);\n\n    // Build order by clause\n    let orderBy;\n    switch (sortBy) {\n      case 'oldest':\n        orderBy = resources.createdAt;\n        break;\n      case 'rating':\n        orderBy = desc(resources.averageRating);\n        break;\n      case 'downloads':\n        orderBy = desc(resources.downloadCount);\n        break;\n      case 'newest':\n      default:\n        orderBy = desc(resources.createdAt);\n        break;\n    }\n\n    // Execute query\n    return await db\n      .select()\n      .from(resources)\n      .where(whereClause)\n      .orderBy(orderBy)\n      .limit(limit)\n      .offset(offset);\n  }\n\n  async createResource(insertResource: InsertResource): Promise<Resource> {\n    const [resource] = await db\n      .insert(resources)\n      .values({\n        ...insertResource,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .returning();\n    return resource;\n  }\n\n  async updateResource(id: string, updates: Partial<Resource>): Promise<Resource | undefined> {\n    const [resource] = await db\n      .update(resources)\n      .set({ \n        ...updates, \n        updatedAt: new Date() \n      })\n      .where(eq(resources.id, id))\n      .returning();\n    return resource || undefined;\n  }\n\n  async deleteResource(id: string): Promise<boolean> {\n    const result = await db\n      .update(resources)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(resources.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async incrementDownloadCount(id: string): Promise<void> {\n    await db\n      .update(resources)\n      .set({ \n        downloadCount: sql`${resources.downloadCount} + 1`,\n        updatedAt: new Date()\n      })\n      .where(eq(resources.id, id));\n  }\n\n  // Rating operations\n  async getRating(resourceId: string, userId: string): Promise<Rating | undefined> {\n    const [rating] = await db\n      .select()\n      .from(ratings)\n      .where(and(eq(ratings.resourceId, resourceId), eq(ratings.userId, userId)));\n    return rating || undefined;\n  }\n\n  async getRatingsForResource(resourceId: string): Promise<Rating[]> {\n    return db.select().from(ratings).where(eq(ratings.resourceId, resourceId));\n  }\n\n  async createOrUpdateRating(insertRating: InsertRating): Promise<Rating> {\n    const [rating] = await db\n      .insert(ratings)\n      .values({\n        ...insertRating,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .onConflictDoUpdate({\n        target: [ratings.resourceId, ratings.userId],\n        set: {\n          rating: insertRating.rating,\n          review: insertRating.review,\n          updatedAt: new Date(),\n        }\n      })\n      .returning();\n\n    // Update resource rating stats\n    await this.updateResourceRatingStats(insertRating.resourceId);\n    \n    return rating;\n  }\n\n  async deleteRating(resourceId: string, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(ratings)\n      .where(and(eq(ratings.resourceId, resourceId), eq(ratings.userId, userId)));\n    \n    if ((result.rowCount ?? 0) > 0) {\n      await this.updateResourceRatingStats(resourceId);\n    }\n    \n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async updateResourceRatingStats(resourceId: string): Promise<void> {\n    const [stats] = await db\n      .select({\n        avgRating: sql<number>`AVG(${ratings.rating})`,\n        ratingCount: sql<number>`COUNT(${ratings.rating})`,\n      })\n      .from(ratings)\n      .where(eq(ratings.resourceId, resourceId));\n\n    await db\n      .update(resources)\n      .set({\n        averageRating: stats.avgRating ? stats.avgRating.toString() : \"0\",\n        ratingCount: stats.ratingCount || 0,\n        updatedAt: new Date(),\n      })\n      .where(eq(resources.id, resourceId));\n  }\n\n  // Tag operations\n  async getTag(id: string): Promise<Tag | undefined> {\n    const [tag] = await db.select().from(tags).where(eq(tags.id, id));\n    return tag || undefined;\n  }\n\n  async getTagByName(name: string): Promise<Tag | undefined> {\n    const [tag] = await db.select().from(tags).where(eq(tags.name, name));\n    return tag || undefined;\n  }\n\n  async getTags(): Promise<Tag[]> {\n    return db.select().from(tags);\n  }\n\n  async createTag(insertTag: InsertTag): Promise<Tag> {\n    const [tag] = await db\n      .insert(tags)\n      .values({\n        ...insertTag,\n        createdAt: new Date(),\n      })\n      .returning();\n    return tag;\n  }\n\n  async getOrCreateTag(name: string): Promise<Tag> {\n    const existingTag = await this.getTagByName(name);\n    if (existingTag) return existingTag;\n    \n    return this.createTag({ name });\n  }\n\n  // Resource-Tag operations\n  async addTagToResource(resourceId: string, tagId: string): Promise<void> {\n    await db\n      .insert(resourceTags)\n      .values({\n        resourceId,\n        tagId,\n        createdAt: new Date(),\n      })\n      .onConflictDoNothing();\n  }\n\n  async removeTagFromResource(resourceId: string, tagId: string): Promise<void> {\n    await db\n      .delete(resourceTags)\n      .where(and(eq(resourceTags.resourceId, resourceId), eq(resourceTags.tagId, tagId)));\n  }\n\n  async getTagsForResource(resourceId: string): Promise<Tag[]> {\n    const result = await db\n      .select({ tag: tags })\n      .from(resourceTags)\n      .innerJoin(tags, eq(resourceTags.tagId, tags.id))\n      .where(eq(resourceTags.resourceId, resourceId));\n    \n    return result.map(row => row.tag);\n  }\n\n  // Favorite operations\n  async getFavorite(userId: string, resourceId: string): Promise<Favorite | undefined> {\n    const [favorite] = await db\n      .select()\n      .from(favorites)\n      .where(and(eq(favorites.userId, userId), eq(favorites.resourceId, resourceId)));\n    return favorite || undefined;\n  }\n\n  async getUserFavorites(userId: string): Promise<Resource[]> {\n    const result = await db\n      .select({ resource: resources })\n      .from(favorites)\n      .innerJoin(resources, eq(favorites.resourceId, resources.id))\n      .where(and(eq(favorites.userId, userId), eq(resources.isActive, true)));\n    \n    return result.map(row => row.resource);\n  }\n\n  async addFavorite(insertFavorite: InsertFavorite): Promise<Favorite> {\n    const [favorite] = await db\n      .insert(favorites)\n      .values({\n        ...insertFavorite,\n        createdAt: new Date(),\n      })\n      .onConflictDoNothing()\n      .returning();\n    return favorite;\n  }\n\n  async removeFavorite(userId: string, resourceId: string): Promise<boolean> {\n    const result = await db\n      .delete(favorites)\n      .where(and(eq(favorites.userId, userId), eq(favorites.resourceId, resourceId)));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Stats operations\n  async getDashboardStats(): Promise<{\n    totalResources: number;\n    totalDownloads: number;\n    averageRating: number;\n    activeUsers: number;\n  }> {\n    const [resourceStats] = await db\n      .select({\n        totalResources: sql<number>`COUNT(*)`,\n        totalDownloads: sql<number>`SUM(${resources.downloadCount})`,\n        averageRating: sql<number>`AVG(${resources.averageRating})`,\n      })\n      .from(resources)\n      .where(eq(resources.isActive, true));\n\n    const [userStats] = await db\n      .select({\n        activeUsers: sql<number>`COUNT(DISTINCT ${resources.uploadedById})`,\n      })\n      .from(resources)\n      .where(eq(resources.isActive, true));\n\n    return {\n      totalResources: resourceStats.totalResources || 0,\n      totalDownloads: resourceStats.totalDownloads || 0,\n      averageRating: resourceStats.averageRating || 0,\n      activeUsers: userStats.activeUsers || 0,\n    };\n  }\n\n  async getUserStats(userId: string): Promise<{\n    uploadedCount: number;\n    totalDownloads: number;\n    averageRating: number;\n  }> {\n    const [stats] = await db\n      .select({\n        uploadedCount: sql<number>`COUNT(*)`,\n        totalDownloads: sql<number>`SUM(${resources.downloadCount})`,\n        averageRating: sql<number>`AVG(${resources.averageRating})`,\n      })\n      .from(resources)\n      .where(and(eq(resources.uploadedById, userId), eq(resources.isActive, true)));\n\n    return {\n      uploadedCount: stats.uploadedCount || 0,\n      totalDownloads: stats.totalDownloads || 0,\n      averageRating: stats.averageRating || 0,\n    };\n  }\n  \n  // Admin operations\n  async getAllUsers(): Promise<User[]> {\n    try {\n      const allUsers = await db.select().from(users).orderBy(desc(users.createdAt));\n      return allUsers;\n    } catch (error) {\n      console.error('Error getting all users:', error);\n      return [];\n    }\n  }\n  \n  async getAllResources(): Promise<Resource[]> {\n    try {\n      const allResources = await db.select().from(resources).orderBy(desc(resources.createdAt));\n      return allResources;\n    } catch (error) {\n      console.error('Error getting all resources:', error);\n      return [];\n    }\n  }\n  \n  async getAdminStats(): Promise<{\n    totalUsers: number;\n    totalResources: number;\n    totalDownloads: number;\n    averageRating: number;\n    activeUsers: number;\n    inactiveResources: number;\n  }> {\n    try {\n      const [userCountResult] = await db.select({ count: count() }).from(users);\n      const [resourceCountResult] = await db.select({ count: count() }).from(resources);\n      const [inactiveResourcesResult] = await db.select({ count: count() }).from(resources).where(eq(resources.isActive, false));\n      \n      const [downloadSumResult] = await db\n        .select({ sum: sql<number>`COALESCE(SUM(${resources.downloadCount}), 0)` })\n        .from(resources);\n      \n      const [avgRatingResult] = await db\n        .select({ avg: sql<number>`COALESCE(AVG(CAST(${resources.averageRating} AS DECIMAL)), 0)` })\n        .from(resources)\n        .where(gte(sql`CAST(${resources.averageRating} AS DECIMAL)`, 0));\n      \n      // Count active users (users who uploaded at least one resource)\n      const [activeUsersResult] = await db\n        .select({ count: sql<number>`COUNT(DISTINCT ${resources.uploadedById})` })\n        .from(resources)\n        .where(eq(resources.isActive, true));\n      \n      return {\n        totalUsers: userCountResult?.count || 0,\n        totalResources: resourceCountResult?.count || 0,\n        totalDownloads: downloadSumResult?.sum || 0,\n        averageRating: avgRatingResult?.avg || 0,\n        activeUsers: activeUsersResult?.count || 0,\n        inactiveResources: inactiveResourcesResult?.count || 0\n      };\n    } catch (error) {\n      console.error('Error getting admin stats:', error);\n      return {\n        totalUsers: 0,\n        totalResources: 0,\n        totalDownloads: 0,\n        averageRating: 0,\n        activeUsers: 0,\n        inactiveResources: 0\n      };\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":17146},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { \n  pgTable, \n  text, \n  varchar, \n  timestamp, \n  integer, \n  decimal,\n  boolean,\n  primaryKey,\n  jsonb,\n  index\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Users table - Updated for Replit Auth compatibility\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(), // Required by Replit Auth, nullable\n  firstName: varchar(\"first_name\"), // Required by Replit Auth, nullable\n  lastName: varchar(\"last_name\"), // Required by Replit Auth, nullable  \n  profileImageUrl: varchar(\"profile_image_url\"), // Required by Replit Auth, nullable\n  // Additional fields for our application\n  username: text(\"username\").unique(),\n  fullName: text(\"full_name\"),\n  major: text(\"major\"),\n  role: text(\"role\").default(\"student\").notNull(), // student or admin\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(), // Required by Replit Auth\n});\n\n// Resources table\nexport const resources = pgTable(\"resources\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  subject: text(\"subject\").notNull(),\n  semester: text(\"semester\"),\n  fileType: text(\"file_type\").notNull(),\n  fileName: text(\"file_name\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  filePath: text(\"file_path\").notNull(),\n  uploadedById: varchar(\"uploaded_by_id\").references(() => users.id).notNull(),\n  downloadCount: integer(\"download_count\").default(0),\n  averageRating: decimal(\"average_rating\", { precision: 3, scale: 2 }).default(\"0\"),\n  ratingCount: integer(\"rating_count\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Ratings table\nexport const ratings = pgTable(\"ratings\", {\n  resourceId: varchar(\"resource_id\").references(() => resources.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  rating: integer(\"rating\").notNull(), // 1-5 stars\n  review: text(\"review\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  // Ensure one rating per user per resource\n  pk: primaryKey({ columns: [table.resourceId, table.userId] }),\n}));\n\n// Tags table\nexport const tags = pgTable(\"tags\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Resource-Tags junction table\nexport const resourceTags = pgTable(\"resource_tags\", {\n  resourceId: varchar(\"resource_id\").references(() => resources.id).notNull(),\n  tagId: varchar(\"tag_id\").references(() => tags.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  pk: primaryKey({ columns: [table.resourceId, table.tagId] }),\n}));\n\n// Favorites table\nexport const favorites = pgTable(\"favorites\", {\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  resourceId: varchar(\"resource_id\").references(() => resources.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  // Ensure one favorite per user per resource\n  pk: primaryKey({ columns: [table.userId, table.resourceId] }),\n}));\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  resources: many(resources),\n  ratings: many(ratings),\n  favorites: many(favorites),\n}));\n\nexport const resourcesRelations = relations(resources, ({ one, many }) => ({\n  uploadedBy: one(users, {\n    fields: [resources.uploadedById],\n    references: [users.id],\n  }),\n  ratings: many(ratings),\n  resourceTags: many(resourceTags),\n  favorites: many(favorites),\n}));\n\nexport const ratingsRelations = relations(ratings, ({ one }) => ({\n  resource: one(resources, {\n    fields: [ratings.resourceId],\n    references: [resources.id],\n  }),\n  user: one(users, {\n    fields: [ratings.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const tagsRelations = relations(tags, ({ many }) => ({\n  resourceTags: many(resourceTags),\n}));\n\nexport const resourceTagsRelations = relations(resourceTags, ({ one }) => ({\n  resource: one(resources, {\n    fields: [resourceTags.resourceId],\n    references: [resources.id],\n  }),\n  tag: one(tags, {\n    fields: [resourceTags.tagId],\n    references: [tags.id],\n  }),\n}));\n\nexport const favoritesRelations = relations(favorites, ({ one }) => ({\n  user: one(users, {\n    fields: [favorites.userId],\n    references: [users.id],\n  }),\n  resource: one(resources, {\n    fields: [favorites.resourceId],\n    references: [resources.id],\n  }),\n}));\n\n// Zod schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  fullName: true,\n  major: true,\n  role: true,\n});\n\nexport const insertResourceSchema = createInsertSchema(resources).pick({\n  title: true,\n  description: true,\n  subject: true,\n  semester: true,\n  fileType: true,\n  fileName: true,\n  fileSize: true,\n  filePath: true,\n  uploadedById: true,\n});\n\nexport const insertRatingSchema = createInsertSchema(ratings).pick({\n  resourceId: true,\n  userId: true,\n  rating: true,\n  review: true,\n});\n\nexport const insertTagSchema = createInsertSchema(tags).pick({\n  name: true,\n});\n\nexport const insertFavoriteSchema = createInsertSchema(favorites).pick({\n  userId: true,\n  resourceId: true,\n});\n\n// TypeScript types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type UpsertUser = typeof users.$inferInsert; // Required by Replit Auth\n\nexport type InsertResource = z.infer<typeof insertResourceSchema>;\nexport type Resource = typeof resources.$inferSelect;\n\nexport type InsertRating = z.infer<typeof insertRatingSchema>;\nexport type Rating = typeof ratings.$inferSelect;\n\nexport type InsertTag = z.infer<typeof insertTagSchema>;\nexport type Tag = typeof tags.$inferSelect;\n\nexport type InsertFavorite = z.infer<typeof insertFavoriteSchema>;\nexport type Favorite = typeof favorites.$inferSelect;\n\n// Extended types with relations\nexport type ResourceWithDetails = Omit<Resource, \"averageRating\" | \"ratingCount\"> & {\n  uploadedBy: User;\n  ratings: Rating[];\n  resourceTags: (typeof resourceTags.$inferSelect & { tag: Tag })[];\n  averageRating: number;\n  ratingCount: number;\n};\n\nexport type UserWithStats = User & {\n  resourceCount: number;\n  totalDownloads: number;\n  averageRating: number;\n};\n","size_bytes":6882},"client/src/App.tsx":{"content":"import { useState } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider, useQuery } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { BookOpen, Upload, AlertCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\n// Components\nimport Landing from \"./components/Landing\";\nimport Home from \"./components/Home\";\nimport Dashboard from \"./components/Dashboard\";\nimport UploadResource from \"./components/UploadResource\";\nimport SearchFilters from \"./components/SearchFilters\";\nimport ResourceCard from \"./components/ResourceCard\";\nimport AppSidebar from \"./components/AppSidebar\";\nimport Header from \"./components/Header\";\nimport NotFound from \"@/pages/not-found\";\n\n\ninterface Resource {\n  id: string;\n  title: string;\n  description: string | null;\n  subject: string;\n  semester: string | null;\n  fileType: string;\n  fileName: string;\n  fileSize: number;\n  filePath: string;\n  uploadedById: string;\n  downloadCount: number | null;\n  averageRating: string | null;\n  ratingCount: number | null;\n  isActive: boolean | null;\n  createdAt: Date | null;\n  updatedAt: Date | null;\n  uploadedBy?: {\n    firstName?: string;\n    lastName?: string;\n    username?: string;\n  };\n}\n\nfunction BrowseResources() {\n  const [filters, setFilters] = useState({\n    query: '',\n    subject: '',\n    minRating: '',\n    sortBy: 'newest' as const\n  });\n\n  // Fetch resources with current filters\n  const { data: resources, isLoading } = useQuery({\n    queryKey: ['/api/resources', filters],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      \n      if (filters.query) params.append('search', filters.query);\n      if (filters.subject && filters.subject !== \"All Subjects\") {\n        params.append('subject', filters.subject);\n      }\n      if (filters.minRating && filters.minRating !== \"all\") {\n        params.append('minRating', filters.minRating);\n      }\n      params.append('sortBy', filters.sortBy);\n      params.append('limit', '50'); // Reasonable limit for browsing\n      \n      const queryString = params.toString();\n      return fetch(`/api/resources${queryString ? '?' + queryString : ''}`)\n        .then(res => res.json());\n    },\n  });\n\n  const handleSearch = (newFilters: typeof filters) => {\n    console.log(\"Updating filters:\", newFilters);\n    setFilters({\n      query: newFilters.query || '',\n      subject: newFilters.subject || '',\n      minRating: newFilters.minRating || '',\n      sortBy: newFilters.sortBy || 'newest'\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-medium text-foreground\">Browse Resources</h1>\n        <p className=\"text-muted-foreground\">Discover study materials shared by your peers</p>\n      </div>\n      \n      <SearchFilters onSearch={handleSearch} />\n      \n      <div>\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-lg font-medium\">\n            {isLoading ? 'Loading...' : `${resources?.length || 0} resources found`}\n          </h2>\n        </div>\n        \n        {isLoading ? (\n          // Loading skeleton\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {Array.from({ length: 6 }).map((_, index) => (\n              <Card key={index} className=\"hover-elevate\">\n                <CardHeader>\n                  <div className=\"h-5 w-3/4 bg-muted animate-pulse rounded mb-2\" />\n                  <div className=\"h-4 w-full bg-muted animate-pulse rounded\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-4 w-1/2 bg-muted animate-pulse rounded\" />\n                    <div className=\"h-4 w-1/3 bg-muted animate-pulse rounded\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : resources && resources.length > 0 ? (\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {resources.map((resource: Resource) => (\n              <ResourceCard key={resource.id} resource={resource} />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-12\">\n            <BookOpen className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n            <p className=\"text-muted-foreground\">No resources found matching your criteria.</p>\n            <p className=\"text-sm text-muted-foreground mt-2\">Try adjusting your filters or search terms.</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction Favorites({ user }: { user: any }) {\n  // Fetch user's favorite resources\n  const { data: favorites, isLoading, error, refetch } = useQuery({\n    queryKey: ['/api/users/me/favorites', user?.id],\n    queryFn: async () => {\n      const res = await fetch('/api/users/me/favorites', {\n        credentials: 'include'\n      });\n      if (!res.ok) {\n        throw new Error(`Failed to fetch favorites: ${res.status} ${res.statusText}`);\n      }\n      return res.json();\n    },\n    enabled: !!user?.id, // Only fetch if user is authenticated\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-medium text-foreground\">Favorites</h1>\n        <p className=\"text-muted-foreground\">Resources you've saved for later</p>\n      </div>\n      \n      {error ? (\n        <div className=\"text-center py-12\" data-testid=\"favorites-error-state\">\n          <AlertCircle className=\"mx-auto h-12 w-12 text-destructive mb-4\" />\n          <h3 className=\"text-lg font-medium text-foreground mb-2\">Failed to load favorites</h3>\n          <p className=\"text-muted-foreground mb-4\">{error instanceof Error ? error.message : 'An unexpected error occurred'}</p>\n          <Button variant=\"outline\" onClick={() => refetch()} data-testid=\"button-retry-favorites\">\n            Try Again\n          </Button>\n        </div>\n      ) : isLoading ? (\n        // Loading skeleton\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\" data-testid=\"favorites-loading-skeleton\">\n          {Array.from({ length: 6 }).map((_, index) => (\n            <Card key={index} className=\"hover-elevate\">\n              <CardHeader>\n                <div className=\"h-5 w-3/4 bg-muted animate-pulse rounded mb-2\" />\n                <div className=\"h-4 w-full bg-muted animate-pulse rounded\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"h-4 w-1/2 bg-muted animate-pulse rounded\" />\n                  <div className=\"h-4 w-1/3 bg-muted animate-pulse rounded\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : favorites && Array.isArray(favorites) && favorites.length > 0 ? (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\" data-testid=\"favorites-grid\">\n          {favorites.map((resource: Resource) => (\n            <ResourceCard key={resource.id} resource={resource} data-testid={`favorite-resource-${resource.id}`} />\n          ))}\n        </div>\n      ) : (\n        <div className=\"text-center py-12\" data-testid=\"favorites-empty-state\">\n          <BookOpen className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground\">No favorite resources yet.</p>\n          <p className=\"text-sm text-muted-foreground mt-2\">Star resources to save them here.</p>\n          <Link href=\"/browse\">\n            <Button className=\"mt-4\" data-testid=\"browse-resources-button\">\n              <BookOpen className=\"mr-2 h-4 w-4\" />\n              Browse Resources\n            </Button>\n          </Link>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction MyResources({ user }: { user: any }) {\n  // Fetch user's own resources\n  const { data: userResources, isLoading } = useQuery({\n    queryKey: ['/api/resources', { userId: user?.id }],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      if (user?.id) {\n        params.append('userId', user.id);\n      }\n      params.append('sortBy', 'newest');\n      \n      const queryString = params.toString();\n      return fetch(`/api/resources${queryString ? '?' + queryString : ''}`)\n        .then(res => res.json());\n    },\n    enabled: !!user?.id, // Only fetch if user ID is available\n  });\n  \n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-medium text-foreground\">My Resources</h1>\n        <p className=\"text-muted-foreground\">Resources you've uploaded to the community</p>\n      </div>\n      \n      {isLoading ? (\n        // Loading skeleton\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {Array.from({ length: 3 }).map((_, index) => (\n            <Card key={index} className=\"hover-elevate\">\n              <CardHeader>\n                <div className=\"h-5 w-3/4 bg-muted animate-pulse rounded mb-2\" />\n                <div className=\"h-4 w-full bg-muted animate-pulse rounded\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"h-4 w-1/2 bg-muted animate-pulse rounded\" />\n                  <div className=\"h-4 w-1/3 bg-muted animate-pulse rounded\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : userResources && userResources.length > 0 ? (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {userResources.map((resource: Resource) => (\n            <ResourceCard key={resource.id} resource={resource} />\n          ))}\n        </div>\n      ) : (\n        <div className=\"text-center py-12\">\n          <BookOpen className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n          <p className=\"text-muted-foreground\">You haven't uploaded any resources yet.</p>\n          <p className=\"text-sm text-muted-foreground mt-2\">Share your knowledge with the community!</p>\n          <Button className=\"mt-4\" onClick={() => {/* TODO: Navigate to upload */}}>\n            <Upload className=\"mr-2 h-4 w-4\" />\n            Upload Your First Resource\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction AuthenticatedRouter({ user }: { user: any }) {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/browse\">\n        <BrowseResources />\n      </Route>\n      <Route path=\"/upload\">\n        <UploadResource />\n      </Route>\n      <Route path=\"/my-resources\">\n        <MyResources user={user} />\n      </Route>\n      <Route path=\"/favorites\">\n        <Favorites user={user} />\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction UnauthenticatedRouter() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route component={Landing} />\n    </Switch>\n  );\n}\n\nfunction AuthenticatedApp({ user }: { user: any }) {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n  };\n\n  // Custom sidebar width\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  // Get user display name\n  const getUserDisplayName = () => {\n    if (user?.firstName && user?.lastName) {\n      return `${user.firstName} ${user.lastName}`;\n    }\n    if (user?.fullName) {\n      return user.fullName;\n    }\n    if (user?.username) {\n      return user.username;\n    }\n    if (user?.email) {\n      return user.email;\n    }\n    return \"User\";\n  };\n\n  // Get user initials\n  const getUserInitials = () => {\n    const displayName = getUserDisplayName();\n    return displayName.split(' ')\n      .map((name: string) => name[0])\n      .join('')\n      .toUpperCase()\n      .slice(0, 2) || \"U\";\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar onNavigate={(path) => window.location.pathname = path} />\n        <div className=\"flex flex-col flex-1 overflow-hidden\">\n          <Header \n            theme={theme}\n            onThemeToggle={toggleTheme}\n            onSearch={(query) => console.log(\"Global search:\", query)}\n            userName={getUserDisplayName()}\n            userInitials={getUserInitials()}\n            notificationCount={0}\n            onLogout={() => window.location.href = '/api/logout'}\n          />\n          <main className=\"flex-1 overflow-auto p-6 bg-background\">\n            <div className=\"max-w-7xl mx-auto\">\n              <AuthenticatedRouter user={user} />\n            </div>\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n\nfunction AppContent() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return isAuthenticated ? <AuthenticatedApp user={user} /> : <UnauthenticatedRouter />;\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AppContent />\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":13895},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 220 8% 98%;\n\n  --foreground: 220 8% 15%;\n\n  --border: 220 8% 88%;\n\n  --card: 220 8% 100%;\n\n  --card-foreground: 220 8% 15%;\n\n  --card-border: 220 8% 94%;\n\n  --sidebar: 220 8% 96%;\n\n  --sidebar-foreground: 220 8% 15%;\n\n  --sidebar-border: 220 8% 90%;\n\n  --sidebar-primary: 210 85% 55%;\n\n  --sidebar-primary-foreground: 220 8% 98%;\n\n  --sidebar-accent: 220 8% 92%;\n\n  --sidebar-accent-foreground: 220 8% 25%;\n\n  --sidebar-ring: 210 85% 55%;\n\n  --popover: 220 8% 96%;\n\n  --popover-foreground: 220 8% 15%;\n\n  --popover-border: 220 8% 90%;\n\n  --primary: 210 85% 55%;\n\n  --primary-foreground: 220 8% 98%;\n\n  --secondary: 220 8% 94%;\n\n  --secondary-foreground: 220 8% 25%;\n\n  --muted: 220 8% 92%;\n\n  --muted-foreground: 220 8% 45%;\n\n  --accent: 220 8% 94%;\n\n  --accent-foreground: 220 8% 25%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 220 8% 98%;\n\n  --input: 220 8% 80%;\n  --ring: 210 85% 55%;\n  --chart-1: 210 85% 45%;\n  --chart-2: 142 76% 35%;\n  --chart-3: 38 92% 40%;\n  --chart-4: 280 75% 45%;\n  --chart-5: 15 85% 45%;\n\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 8% 15% / 0.04);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 8% 15% / 0.06);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 8% 15% / 0.08), 0px 1px 2px -1px hsl(220 8% 15% / 0.06);\n  --shadow: 0px 2px 0px 0px hsl(220 8% 15% / 0.10), 0px 1px 2px -1px hsl(220 8% 15% / 0.08);\n  --shadow-md: 0px 2px 0px 0px hsl(220 8% 15% / 0.12), 0px 2px 4px -1px hsl(220 8% 15% / 0.10);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 8% 15% / 0.14), 0px 4px 6px -1px hsl(220 8% 15% / 0.12);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 8% 15% / 0.16), 0px 8px 10px -1px hsl(220 8% 15% / 0.14);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 8% 15% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .12);\n  --badge-outline: rgba(255,255,255, .06);\n\n  --opaque-button-border-intensity: 8;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .05);\n  --elevate-2: rgba(255,255,255, .10);\n\n  /* Sophisticated dark grey base - deeper and more refined */\n  --background: 222 8% 7%;\n\n  --foreground: 220 12% 92%;\n\n  --border: 222 8% 18%;\n\n  /* Enhanced card system with better elevation */\n  --card: 222 8% 11%;\n\n  --card-foreground: 220 12% 92%;\n\n  --card-border: 222 8% 16%;\n\n  /* Refined sidebar with subtle contrast */\n  --sidebar: 222 8% 9%;\n\n  --sidebar-foreground: 220 12% 92%;\n\n  --sidebar-border: 222 8% 14%;\n\n  /* Neutral light grey primary for excellent contrast */\n  --sidebar-primary: 220 6% 88%;\n\n  --sidebar-primary-foreground: 222 8% 7%;\n\n  --sidebar-accent: 222 8% 16%;\n\n  --sidebar-accent-foreground: 220 12% 85%;\n\n  --sidebar-ring: 210 90% 56%;\n\n  /* Improved popover contrast */\n  --popover: 222 8% 14%;\n\n  --popover-foreground: 220 12% 92%;\n\n  --popover-border: 222 8% 20%;\n\n  /* Refined primary color - neutral light grey for sophistication */\n  --primary: 220 6% 88%;\n\n  --primary-foreground: 222 8% 7%;\n\n  /* Enhanced secondary and muted colors */\n  --secondary: 222 8% 16%;\n\n  --secondary-foreground: 220 12% 85%;\n\n  --muted: 222 8% 14%;\n\n  --muted-foreground: 220 10% 70%;\n\n  --accent: 222 8% 18%;\n\n  --accent-foreground: 220 12% 85%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 220 12% 98%;\n\n  /* Enhanced input contrast for better visibility */\n  --input: 222 8% 24%;\n  --ring: 210 90% 56%;\n  \n  /* Adjusted chart colors for better contrast on dark backgrounds */\n  --chart-1: 210 85% 70%;\n  --chart-2: 142 76% 60%;\n  --chart-3: 38 92% 65%;\n  --chart-4: 280 75% 70%;\n  --chart-5: 15 85% 60%;\n\n  /* Enhanced shadows for better depth */\n  --shadow-2xs: 0px 2px 0px 0px hsl(222 8% 0% / 0.25);\n  --shadow-xs: 0px 2px 0px 0px hsl(222 8% 0% / 0.30);\n  --shadow-sm: 0px 2px 0px 0px hsl(222 8% 0% / 0.35), 0px 1px 2px -1px hsl(222 8% 0% / 0.25);\n  --shadow: 0px 2px 0px 0px hsl(222 8% 0% / 0.40), 0px 1px 2px -1px hsl(222 8% 0% / 0.30);\n  --shadow-md: 0px 2px 0px 0px hsl(222 8% 0% / 0.45), 0px 2px 4px -1px hsl(222 8% 0% / 0.35);\n  --shadow-lg: 0px 2px 0px 0px hsl(222 8% 0% / 0.50), 0px 4px 6px -1px hsl(222 8% 0% / 0.40);\n  --shadow-xl: 0px 2px 0px 0px hsl(222 8% 0% / 0.55), 0px 8px 10px -1px hsl(222 8% 0% / 0.45);\n  --shadow-2xl: 0px 2px 0px 0px hsl(222 8% 0% / 0.65);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10326},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AppSidebar.tsx":{"content":"import { \n  Home, \n  Search, \n  Upload, \n  BookOpen, \n  Star, \n  Settings, \n  Users,\n  TrendingUp,\n  GraduationCap,\n  LogOut\n} from \"lucide-react\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarRail,\n  SidebarHeader,\n} from \"@/components/ui/sidebar\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\n\n// Navigation items\nconst navigationItems = [\n  {\n    title: \"Dashboard\",\n    url: \"/\",\n    icon: Home,\n  },\n  {\n    title: \"Browse Resources\",\n    url: \"/browse\",\n    icon: Search,\n  },\n  {\n    title: \"Upload Resource\",\n    url: \"/upload\",\n    icon: Upload,\n  },\n  {\n    title: \"My Resources\",\n    url: \"/my-resources\",\n    icon: BookOpen,\n  },\n  {\n    title: \"Favorites\",\n    url: \"/favorites\",\n    icon: Star,\n    badge: \"12\",\n  },\n];\n\nconst communityItems = [\n  {\n    title: \"Top Contributors\",\n    url: \"/contributors\",\n    icon: Users,\n  },\n  {\n    title: \"Trending\",\n    url: \"/trending\",\n    icon: TrendingUp,\n  },\n];\n\nconst subjects = [\n  \"Computer Science\", \n  \"Mathematics\", \n  \"Physics\", \n  \"Chemistry\", \n  \"Biology\"\n];\n\ninterface AppSidebarProps {\n  activeItem?: string;\n  onNavigate?: (path: string) => void;\n}\n\nexport default function AppSidebar({ activeItem = \"/\", onNavigate }: AppSidebarProps) {\n  const handleNavigation = (url: string) => {\n    console.log(\"Navigating to:\", url);\n    onNavigate?.(url);\n  };\n\n  const handleLogout = () => {\n    console.log(\"Logout clicked\");\n  };\n\n  return (\n    <Sidebar className=\"w-64\">\n      <SidebarHeader className=\"p-4\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <GraduationCap className=\"h-5 w-5 text-primary-foreground\" />\n          </div>\n          <div>\n            <h2 className=\"text-sm font-medium text-foreground\">Resource Hub</h2>\n            <p className=\"text-xs text-muted-foreground\">Student Portal</p>\n          </div>\n        </div>\n      </SidebarHeader>\n\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {navigationItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton \n                    asChild\n                    isActive={activeItem === item.url}\n                    data-testid={`nav-${item.title.toLowerCase().replace(' ', '-')}`}\n                  >\n                    <button \n                      onClick={() => handleNavigation(item.url)}\n                      className=\"w-full flex items-center space-x-2\"\n                    >\n                      <item.icon className=\"h-4 w-4\" />\n                      <span className=\"flex-1 text-left\">{item.title}</span>\n                      {item.badge && (\n                        <Badge variant=\"secondary\" className=\"text-xs h-5\">\n                          {item.badge}\n                        </Badge>\n                      )}\n                    </button>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarGroup>\n          <SidebarGroupLabel>Community</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {communityItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton \n                    asChild\n                    isActive={activeItem === item.url}\n                    data-testid={`nav-${item.title.toLowerCase().replace(' ', '-')}`}\n                  >\n                    <button \n                      onClick={() => handleNavigation(item.url)}\n                      className=\"w-full flex items-center space-x-2\"\n                    >\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </button>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarGroup>\n          <SidebarGroupLabel>Popular Subjects</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {subjects.map((subject) => (\n                <SidebarMenuItem key={subject}>\n                  <SidebarMenuButton \n                    asChild\n                    size=\"sm\"\n                    data-testid={`subject-${subject.toLowerCase().replace(' ', '-')}`}\n                  >\n                    <button \n                      onClick={() => handleNavigation(`/subject/${subject.toLowerCase().replace(' ', '-')}`)}\n                      className=\"w-full text-left text-sm\"\n                    >\n                      {subject}\n                    </button>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n\n      <SidebarFooter className=\"p-4\">\n        <div className=\"space-y-3\">\n          {/* User Profile */}\n          <div className=\"flex items-center space-x-3 p-2 rounded-lg bg-sidebar-accent\">\n            <Avatar className=\"h-8 w-8\">\n              <AvatarFallback className=\"text-xs\">JD</AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-foreground\" data-testid=\"user-name\">\n                John Doe\n              </p>\n              <p className=\"text-xs text-muted-foreground\" data-testid=\"user-status\">\n                Computer Science\n              </p>\n            </div>\n          </div>\n\n          {/* Footer Actions */}\n          <div className=\"flex space-x-2\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"flex-1\"\n              onClick={() => handleNavigation('/settings')}\n              data-testid=\"button-settings\"\n            >\n              <Settings className=\"h-4 w-4 mr-1\" />\n              Settings\n            </Button>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={handleLogout}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </SidebarFooter>\n      \n      <SidebarRail />\n    </Sidebar>\n  );\n}","size_bytes":6727},"client/src/components/AuthForm.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { GraduationCap, Lock, User, Mail } from \"lucide-react\";\n\nexport default function AuthForm() {\n  const [activeTab, setActiveTab] = useState(\"login\");\n  const [loginForm, setLoginForm] = useState({ username: \"\", password: \"\" });\n  const [registerForm, setRegisterForm] = useState({ username: \"\", email: \"\", password: \"\", confirmPassword: \"\" });\n  const { toast } = useToast();\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(\"Login attempted:\", loginForm);\n    toast({\n      title: \"Login attempted\",\n      description: \"This is a demo. In the real app, you'd be logged in.\",\n    });\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (registerForm.password !== registerForm.confirmPassword) {\n      toast({\n        title: \"Password mismatch\",\n        description: \"Please ensure both passwords match.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    console.log(\"Register attempted:\", registerForm);\n    toast({\n      title: \"Registration attempted\",\n      description: \"This is a demo. In the real app, your account would be created.\",\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto w-12 h-12 bg-primary rounded-lg flex items-center justify-center mb-4\">\n            <GraduationCap className=\"h-6 w-6 text-primary-foreground\" />\n          </div>\n          <h1 className=\"text-2xl font-medium text-foreground\">College Resource Hub</h1>\n          <p className=\"text-sm text-muted-foreground\">Share knowledge, excel together</p>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"login\" data-testid=\"tab-login\">Sign In</TabsTrigger>\n            <TabsTrigger value=\"register\" data-testid=\"tab-register\">Sign Up</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"login\">\n            <Card>\n              <form onSubmit={handleLogin}>\n                <CardHeader className=\"space-y-1\">\n                  <CardTitle className=\"text-xl\">Welcome back</CardTitle>\n                  <CardDescription>Enter your credentials to access your account</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"username\">Username</Label>\n                    <div className=\"relative\">\n                      <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        id=\"username\"\n                        placeholder=\"Enter your username\"\n                        className=\"pl-10\"\n                        value={loginForm.username}\n                        onChange={(e) => setLoginForm({ ...loginForm, username: e.target.value })}\n                        data-testid=\"input-username\"\n                        required\n                      />\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"password\">Password</Label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        id=\"password\"\n                        type=\"password\"\n                        placeholder=\"Enter your password\"\n                        className=\"pl-10\"\n                        value={loginForm.password}\n                        onChange={(e) => setLoginForm({ ...loginForm, password: e.target.value })}\n                        data-testid=\"input-password\"\n                        required\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n                <CardFooter>\n                  <Button type=\"submit\" className=\"w-full\" data-testid=\"button-login\">\n                    Sign In\n                  </Button>\n                </CardFooter>\n              </form>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"register\">\n            <Card>\n              <form onSubmit={handleRegister}>\n                <CardHeader className=\"space-y-1\">\n                  <CardTitle className=\"text-xl\">Create account</CardTitle>\n                  <CardDescription>Join thousands of students sharing knowledge</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"reg-username\">Username</Label>\n                    <div className=\"relative\">\n                      <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        id=\"reg-username\"\n                        placeholder=\"Choose a username\"\n                        className=\"pl-10\"\n                        value={registerForm.username}\n                        onChange={(e) => setRegisterForm({ ...registerForm, username: e.target.value })}\n                        data-testid=\"input-reg-username\"\n                        required\n                      />\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        placeholder=\"Enter your email\"\n                        className=\"pl-10\"\n                        value={registerForm.email}\n                        onChange={(e) => setRegisterForm({ ...registerForm, email: e.target.value })}\n                        data-testid=\"input-email\"\n                        required\n                      />\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"reg-password\">Password</Label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        id=\"reg-password\"\n                        type=\"password\"\n                        placeholder=\"Create a password\"\n                        className=\"pl-10\"\n                        value={registerForm.password}\n                        onChange={(e) => setRegisterForm({ ...registerForm, password: e.target.value })}\n                        data-testid=\"input-reg-password\"\n                        required\n                      />\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"confirm-password\">Confirm Password</Label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        id=\"confirm-password\"\n                        type=\"password\"\n                        placeholder=\"Confirm your password\"\n                        className=\"pl-10\"\n                        value={registerForm.confirmPassword}\n                        onChange={(e) => setRegisterForm({ ...registerForm, confirmPassword: e.target.value })}\n                        data-testid=\"input-confirm-password\"\n                        required\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n                <CardFooter>\n                  <Button type=\"submit\" className=\"w-full\" data-testid=\"button-register\">\n                    Create Account\n                  </Button>\n                </CardFooter>\n              </form>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":8598},"client/src/components/Dashboard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { BookOpen, Download, Star, Upload, TrendingUp, Users } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport ResourceCard from \"@/components/ResourceCard\";\n\nexport default function Dashboard() {\n  // Fetch dashboard stats\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: ['/api/stats'],\n    queryFn: () => fetch('/api/stats').then(res => res.json()),\n  });\n\n  // Fetch recent resources (limit to 6 for dashboard)\n  const { data: recentResources, isLoading: resourcesLoading } = useQuery({\n    queryKey: ['/api/resources', { limit: 6, sortBy: 'newest' }],\n    queryFn: () => fetch('/api/resources?limit=6&sortBy=newest').then(res => res.json()),\n  });\n\n  // Transform stats data for display\n  const dashboardStats = (stats && typeof stats === 'object') ? [\n    { \n      title: \"Total Resources\", \n      value: stats.totalResources?.toString() || \"0\", \n      icon: BookOpen, \n      change: \"+12%\" // TODO: Calculate actual change\n    },\n    { \n      title: \"Total Downloads\", \n      value: stats.totalDownloads?.toString() || \"0\", \n      icon: Download, \n      change: \"+23%\" // TODO: Calculate actual change\n    },\n    { \n      title: \"Average Rating\", \n      value: stats.averageRating ? stats.averageRating.toFixed(1) : \"0.0\", \n      icon: Star, \n      change: \"+0.2\" // TODO: Calculate actual change\n    },\n    { \n      title: \"Active Contributors\", \n      value: stats.activeUsers?.toString() || \"0\", \n      icon: Users, \n      change: \"+8%\" // TODO: Calculate actual change\n    },\n  ] : [];\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-medium text-foreground\">Welcome back!</h1>\n        <p className=\"text-muted-foreground\">Here's what's happening in your study hub today.</p>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        {statsLoading ? (\n          // Loading skeleton for stats\n          Array.from({ length: 4 }).map((_, index) => (\n            <Card key={index} className=\"hover-elevate\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <div className=\"h-4 w-24 bg-muted animate-pulse rounded\" />\n                <div className=\"h-4 w-4 bg-muted animate-pulse rounded\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-8 w-16 bg-muted animate-pulse rounded mb-2\" />\n                <div className=\"h-3 w-20 bg-muted animate-pulse rounded\" />\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          dashboardStats.map((stat, index) => (\n            <Card key={index} className=\"hover-elevate\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">{stat.title}</CardTitle>\n                <stat.icon className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-medium\">{stat.value}</div>\n                <div className=\"flex items-center text-xs text-muted-foreground\">\n                  <TrendingUp className=\"mr-1 h-3 w-3\" />\n                  {stat.change} from last week\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Quick Actions</CardTitle>\n          <CardDescription>Jump into the most common tasks</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex gap-4\">\n            <Button data-testid=\"button-upload-resource\" className=\"flex-1\">\n              <Upload className=\"mr-2 h-4 w-4\" />\n              Upload Resource\n            </Button>\n            <Button variant=\"outline\" data-testid=\"button-browse-resources\" className=\"flex-1\">\n              <BookOpen className=\"mr-2 h-4 w-4\" />\n              Browse Resources\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Recent Resources */}\n      <div>\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-xl font-medium\">Recent Resources</h2>\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"link-view-all\">\n            View all\n          </Button>\n        </div>\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {resourcesLoading ? (\n            // Loading skeleton for resources\n            Array.from({ length: 6 }).map((_, index) => (\n              <Card key={index} className=\"hover-elevate\">\n                <CardHeader>\n                  <div className=\"h-5 w-3/4 bg-muted animate-pulse rounded mb-2\" />\n                  <div className=\"h-4 w-full bg-muted animate-pulse rounded\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-4 w-1/2 bg-muted animate-pulse rounded\" />\n                    <div className=\"h-4 w-1/3 bg-muted animate-pulse rounded\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : recentResources && Array.isArray(recentResources) && recentResources.length > 0 ? (\n            recentResources.map((resource: any) => (\n              <ResourceCard key={resource.id} resource={resource} />\n            ))\n          ) : (\n            <div className=\"col-span-full text-center py-8 text-muted-foreground\">\n              <BookOpen className=\"mx-auto h-8 w-8 mb-2\" />\n              <p>No resources available yet. Be the first to upload!</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Popular Subjects */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Popular Subjects This Week</CardTitle>\n          <CardDescription>Most active subjects in your network</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-2\">\n            {[\"Computer Science\", \"Mathematics\", \"Physics\", \"Chemistry\", \"Biology\", \"Economics\", \"Psychology\", \"History\"].map((subject) => (\n              <Badge \n                key={subject} \n                variant=\"secondary\" \n                className=\"hover-elevate cursor-pointer\" \n                data-testid={`subject-${subject.toLowerCase().replace(' ', '-')}`}\n              >\n                {subject}\n              </Badge>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6802},"client/src/components/Header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuLabel, \n  DropdownMenuSeparator, \n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Search, \n  Bell, \n  Settings, \n  User, \n  LogOut, \n  Moon, \n  Sun,\n  Upload\n} from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface HeaderProps {\n  onSearch?: (query: string) => void;\n  onThemeToggle?: () => void;\n  onLogout?: () => void;\n  theme?: \"light\" | \"dark\";\n  userName?: string;\n  userInitials?: string;\n  notificationCount?: number;\n}\n\nexport default function Header({ \n  onSearch,\n  onThemeToggle,\n  onLogout,\n  theme = \"light\",\n  userName = \"John Doe\",\n  userInitials = \"JD\",\n  notificationCount = 3\n}: HeaderProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(\"Header search:\", searchQuery);\n    onSearch?.(searchQuery);\n  };\n\n  const handleProfileAction = (action: string) => {\n    console.log(\"Profile action:\", action);\n    if (action === 'logout' && onLogout) {\n      onLogout();\n    }\n  };\n\n  const handleNotification = () => {\n    console.log(\"Notifications clicked\");\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"flex h-14 items-center px-4\">\n        {/* Sidebar Toggle */}\n        <SidebarTrigger className=\"mr-4\" data-testid=\"button-sidebar-toggle\" />\n        \n        {/* Search Bar */}\n        <form onSubmit={handleSearch} className=\"flex-1 max-w-md\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search resources...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 pr-4\"\n              data-testid=\"input-header-search\"\n            />\n          </div>\n        </form>\n\n        {/* Right Side Actions */}\n        <div className=\"flex items-center space-x-2 ml-4\">\n          {/* Upload Button */}\n          <Button \n            size=\"sm\" \n            variant=\"outline\" \n            className=\"hidden md:flex\"\n            onClick={() => console.log(\"Upload clicked\")}\n            data-testid=\"button-header-upload\"\n          >\n            <Upload className=\"h-4 w-4 mr-2\" />\n            Upload\n          </Button>\n\n          {/* Theme Toggle */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onThemeToggle}\n            data-testid=\"button-theme-toggle\"\n          >\n            {theme === \"light\" ? (\n              <Moon className=\"h-4 w-4\" />\n            ) : (\n              <Sun className=\"h-4 w-4\" />\n            )}\n          </Button>\n\n          {/* Notifications */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"relative\"\n            onClick={handleNotification}\n            data-testid=\"button-notifications\"\n          >\n            <Bell className=\"h-4 w-4\" />\n            {notificationCount > 0 && (\n              <Badge \n                variant=\"destructive\" \n                className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full p-0 flex items-center justify-center text-xs\"\n                data-testid=\"notification-badge\"\n              >\n                {notificationCount > 9 ? '9+' : notificationCount}\n              </Badge>\n            )}\n          </Button>\n\n          {/* User Menu */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\" data-testid=\"button-user-menu\">\n                <Avatar className=\"h-8 w-8\">\n                  <AvatarFallback className=\"text-xs\">\n                    {userInitials}\n                  </AvatarFallback>\n                </Avatar>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n              <DropdownMenuLabel className=\"font-normal\">\n                <div className=\"flex flex-col space-y-1\">\n                  <p className=\"text-sm font-medium leading-none\" data-testid=\"dropdown-username\">\n                    {userName}\n                  </p>\n                  <p className=\"text-xs leading-none text-muted-foreground\">\n                    Computer Science Student\n                  </p>\n                </div>\n              </DropdownMenuLabel>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem \n                onClick={() => handleProfileAction('profile')}\n                data-testid=\"dropdown-profile\"\n              >\n                <User className=\"mr-2 h-4 w-4\" />\n                <span>Profile</span>\n              </DropdownMenuItem>\n              <DropdownMenuItem \n                onClick={() => handleProfileAction('settings')}\n                data-testid=\"dropdown-settings\"\n              >\n                <Settings className=\"mr-2 h-4 w-4\" />\n                <span>Settings</span>\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem \n                onClick={() => handleProfileAction('logout')}\n                data-testid=\"dropdown-logout\"\n              >\n                <LogOut className=\"mr-2 h-4 w-4\" />\n                <span>Log out</span>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":5864},"client/src/components/RatingSystem.tsx":{"content":"import { Star } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface RatingSystemProps {\n  rating: number;\n  onRating?: (rating: number) => void;\n  size?: \"sm\" | \"md\" | \"lg\";\n  readonly?: boolean;\n  \"data-testid\"?: string;\n}\n\nexport default function RatingSystem({ \n  rating, \n  onRating, \n  size = \"md\", \n  readonly = false,\n  \"data-testid\": dataTestId\n}: RatingSystemProps) {\n  const sizeClasses = {\n    sm: \"h-3 w-3\",\n    md: \"h-4 w-4\", \n    lg: \"h-5 w-5\",\n  };\n\n  const handleStarClick = (starRating: number) => {\n    if (!readonly && onRating) {\n      onRating(starRating);\n    }\n  };\n\n  return (\n    <div className=\"flex items-center space-x-0.5\" data-testid={dataTestId}>\n      {[1, 2, 3, 4, 5].map((star) => (\n        <button\n          key={star}\n          type=\"button\"\n          onClick={() => handleStarClick(star)}\n          disabled={readonly}\n          className={cn(\n            \"transition-colors duration-150\",\n            !readonly && \"hover:scale-110 active:scale-95\",\n            readonly ? \"cursor-default\" : \"cursor-pointer\"\n          )}\n          data-testid={`star-${star}`}\n        >\n          <Star\n            className={cn(\n              sizeClasses[size],\n              \"transition-all duration-150\",\n              star <= rating \n                ? \"fill-amber-400 text-amber-400\" \n                : \"fill-muted text-muted-foreground\"\n            )}\n          />\n        </button>\n      ))}\n    </div>\n  );\n}","size_bytes":1450},"client/src/components/ResourceCard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Download, Star, FileText, File } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport RatingSystem from \"@/components/RatingSystem\";\nimport type { Resource } from \"@shared/schema\";\n\ninterface ResourceCardProps {\n  resource: Resource;\n}\n\nconst getFileIcon = (fileType: string) => {\n  // Handle both MIME types and file extensions\n  const type = fileType.toLowerCase();\n  if (type.includes('pdf') || type === 'pdf') {\n    return <FileText className=\"h-4 w-4 text-red-600\" />;\n  }\n  if (type.includes('word') || type.includes('document') || \n      type === 'docx' || type === 'doc' || \n      type.includes('vnd.openxmlformats-officedocument.wordprocessingml.document') ||\n      type.includes('msword')) {\n    return <File className=\"h-4 w-4 text-blue-600\" />;\n  }\n  if (type.includes('image') || type.includes('jpeg') || type.includes('png')) {\n    return <File className=\"h-4 w-4 text-green-600\" />;\n  }\n  return <File className=\"h-4 w-4 text-muted-foreground\" />;\n};\n\n// Helper function to format relative time\nconst formatRelativeTime = (date: Date | string) => {\n  const now = new Date();\n  const resourceDate = new Date(date);\n  const diffInMs = now.getTime() - resourceDate.getTime();\n  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\n  const diffInDays = Math.floor(diffInHours / 24);\n  \n  if (diffInHours < 1) return \"Just now\";\n  if (diffInHours < 24) return `${diffInHours} hour${diffInHours > 1 ? 's' : ''} ago`;\n  if (diffInDays < 7) return `${diffInDays} day${diffInDays > 1 ? 's' : ''} ago`;\n  \n  return resourceDate.toLocaleDateString();\n};\n\n// Helper function to get user display name\nconst getUserDisplayName = (user: any, fallbackId?: string) => {\n  if (!user) return fallbackId ? `User ${fallbackId.slice(0, 8)}` : \"Unknown User\";\n  if (typeof user === 'string') return user; // Handle legacy string format\n  if (user.firstName && user.lastName) return `${user.firstName} ${user.lastName}`;\n  if (user.fullName) return user.fullName;\n  if (user.username) return user.username;\n  if (user.email) return user.email;\n  return \"Unknown User\";\n};\n\nexport default function ResourceCard({ resource }: ResourceCardProps) {\n  const { toast } = useToast();\n  \n  // Mutation for downloading file (this will handle both download and count increment)\n  const downloadMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/resources/${resource.id}/download`, {\n        method: 'GET',\n        credentials: 'include'\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Download failed: ${response.status} ${response.statusText}`);\n      }\n      \n      // Get the filename from the response headers or use a default\n      const contentDisposition = response.headers.get('Content-Disposition');\n      let filename = resource.fileName;\n      if (contentDisposition) {\n        const filenameMatch = contentDisposition.match(/filename=\"?([^\"]+)\"?/);\n        if (filenameMatch) {\n          filename = filenameMatch[1];\n        }\n      }\n      \n      // Create blob and download\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      return { filename };\n    },\n    onSuccess: (data) => {\n      // Invalidate resources queries to update download count\n      queryClient.invalidateQueries({ queryKey: ['/api/resources'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me/favorites'] });\n      toast({\n        title: \"Download successful\",\n        description: `${data.filename} has been downloaded.`,\n      });\n    },\n    onError: (error: Error) => {\n      console.error('Download error:', error);\n      toast({\n        title: \"Download failed\",\n        description: error.message || \"Could not download the resource. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDownload = () => {\n    downloadMutation.mutate();\n  };\n\n  const handleRating = (rating: number) => {\n    console.log(\"Rating resource:\", resource.id, \"with\", rating, \"stars\");\n    // TODO: Implement rating functionality\n    toast({\n      title: \"Rating submitted\",\n      description: `You rated this resource ${rating} stars.`,\n    });\n  };\n\n  return (\n    <Card className=\"hover-elevate\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            {getFileIcon(resource.fileType)}\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {resource.fileType}\n            </Badge>\n          </div>\n          <Button \n            size=\"sm\" \n            variant=\"outline\" \n            onClick={handleDownload}\n            disabled={downloadMutation.isPending}\n            data-testid={`button-download-${resource.id}`}\n          >\n            <Download className=\"h-3 w-3 mr-1\" />\n            {resource.downloadCount || 0}\n          </Button>\n        </div>\n        <CardTitle className=\"text-base line-clamp-2\" data-testid={`title-resource-${resource.id}`}>\n          {resource.title}\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <p className=\"text-sm text-muted-foreground line-clamp-2\" data-testid={`description-resource-${resource.id}`}>\n          {resource.description}\n        </p>\n        \n        <div className=\"flex flex-wrap gap-1\">\n          <Badge variant=\"secondary\" className=\"text-xs\" data-testid={`subject-${resource.subject.toLowerCase()}`}>\n            {resource.subject}\n          </Badge>\n          {resource.semester && (\n            <Badge variant=\"secondary\" className=\"text-xs\" data-testid={`semester-${resource.semester.toLowerCase().replace(' ', '-')}`}>\n              {resource.semester}\n            </Badge>\n          )}\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <RatingSystem \n            rating={parseFloat(resource.averageRating || \"0\")} \n            onRating={handleRating}\n            size=\"sm\"\n            data-testid={`rating-resource-${resource.id}`}\n          />\n          <div className=\"flex items-center space-x-1 text-xs text-muted-foreground\">\n            <Star className=\"h-3 w-3 fill-current\" />\n            <span data-testid={`rating-value-${resource.id}`}>\n              {parseFloat(resource.averageRating || \"0\").toFixed(1)}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n          <div className=\"flex items-center space-x-2\">\n            <Avatar className=\"h-5 w-5\">\n              <AvatarFallback className=\"text-xs\">\n                {getUserDisplayName((resource as any).uploadedBy || resource.uploadedById, resource.uploadedById).split(' ').map((n: string) => n[0]).join('').toUpperCase()}\n              </AvatarFallback>\n            </Avatar>\n            <span data-testid={`uploader-${resource.id}`}>\n              {getUserDisplayName((resource as any).uploadedBy || resource.uploadedById, resource.uploadedById)}\n            </span>\n          </div>\n          <span data-testid={`uploaded-time-${resource.id}`}>\n            {formatRelativeTime(resource.createdAt || new Date())}\n          </span>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7855},"client/src/components/SearchFilters.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Search, Filter, X, Star } from \"lucide-react\";\n\nconst subjects = [\n  \"All Subjects\", \"Mathematics\", \"Computer Science\", \"Physics\", \"Chemistry\", \n  \"Biology\", \"Economics\", \"Psychology\", \"History\", \"Literature\", \"Engineering\"\n];\n\nconst semesters = [\n  \"All Semesters\", \"Fall 2024\", \"Spring 2024\", \"Fall 2023\", \"Spring 2023\", \"Fall 2022\", \"Spring 2022\"\n];\n\nconst fileTypes = [\n  { id: \"pdf\", label: \"PDF\" },\n  { id: \"doc\", label: \"Word Documents\" },\n  { id: \"img\", label: \"Images\" },\n  { id: \"ppt\", label: \"Presentations\" },\n];\n\nconst ratings = [\n  { value: \"all\", label: \"All Ratings\" },\n  { value: \"4\", label: \"4+ Stars\" },\n  { value: \"3\", label: \"3+ Stars\" },\n  { value: \"2\", label: \"2+ Stars\" },\n];\n\ninterface SearchFiltersProps {\n  onSearch?: (filters: any) => void;\n}\n\nexport default function SearchFilters({ onSearch }: SearchFiltersProps) {\n  const [filters, setFilters] = useState({\n    query: \"\",\n    subject: \"All Subjects\",\n    semester: \"All Semesters\",\n    fileTypes: [] as string[],\n    minRating: \"all\",\n    sortBy: \"relevance\",\n  });\n  \n  const [showAdvanced, setShowAdvanced] = useState(false);\n\n  const handleSearch = () => {\n    console.log(\"Search with filters:\", filters);\n    onSearch?.(filters);\n  };\n\n  const clearFilters = () => {\n    const clearedFilters = {\n      query: \"\",\n      subject: \"All Subjects\",\n      semester: \"All Semesters\",\n      fileTypes: [],\n      minRating: \"all\",\n      sortBy: \"relevance\",\n    };\n    setFilters(clearedFilters);\n    onSearch?.(clearedFilters);\n  };\n\n  const toggleFileType = (fileType: string) => {\n    setFilters({\n      ...filters,\n      fileTypes: filters.fileTypes.includes(fileType)\n        ? filters.fileTypes.filter(t => t !== fileType)\n        : [...filters.fileTypes, fileType]\n    });\n  };\n\n  const activeFiltersCount = [\n    filters.subject !== \"All Subjects\" ? 1 : 0,\n    filters.semester !== \"All Semesters\" ? 1 : 0,\n    filters.fileTypes.length,\n    filters.minRating !== \"all\" ? 1 : 0,\n  ].reduce((a, b) => a + b, 0);\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Search Bar */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex space-x-2\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search for notes, papers, guides...\"\n                className=\"pl-10\"\n                value={filters.query}\n                onChange={(e) => setFilters({ ...filters, query: e.target.value })}\n                onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n                data-testid=\"input-search\"\n              />\n            </div>\n            <Button onClick={handleSearch} data-testid=\"button-search\">\n              <Search className=\"h-4 w-4 mr-2\" />\n              Search\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowAdvanced(!showAdvanced)}\n              data-testid=\"button-toggle-filters\"\n            >\n              <Filter className=\"h-4 w-4 mr-2\" />\n              Filters\n              {activeFiltersCount > 0 && (\n                <Badge variant=\"secondary\" className=\"ml-2 h-5 min-w-5 rounded-full text-xs\">\n                  {activeFiltersCount}\n                </Badge>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Advanced Filters */}\n      {showAdvanced && (\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"text-lg\">Advanced Filters</CardTitle>\n                <CardDescription>Refine your search results</CardDescription>\n              </div>\n              <Button variant=\"ghost\" size=\"sm\" onClick={clearFilters} data-testid=\"button-clear-filters\">\n                <X className=\"h-4 w-4 mr-1\" />\n                Clear All\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label>Subject</Label>\n                <Select \n                  value={filters.subject} \n                  onValueChange={(value) => setFilters({ ...filters, subject: value })}\n                >\n                  <SelectTrigger data-testid=\"select-filter-subject\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {subjects.map((subject) => (\n                      <SelectItem key={subject} value={subject}>\n                        {subject}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Semester</Label>\n                <Select \n                  value={filters.semester} \n                  onValueChange={(value) => setFilters({ ...filters, semester: value })}\n                >\n                  <SelectTrigger data-testid=\"select-filter-semester\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {semesters.map((semester) => (\n                      <SelectItem key={semester} value={semester}>\n                        {semester}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>File Types</Label>\n              <div className=\"flex flex-wrap gap-3\">\n                {fileTypes.map((fileType) => (\n                  <div key={fileType.id} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={fileType.id}\n                      checked={filters.fileTypes.includes(fileType.id)}\n                      onCheckedChange={() => toggleFileType(fileType.id)}\n                      data-testid={`checkbox-${fileType.id}`}\n                    />\n                    <Label htmlFor={fileType.id} className=\"text-sm cursor-pointer\">\n                      {fileType.label}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label>Minimum Rating</Label>\n                <Select \n                  value={filters.minRating} \n                  onValueChange={(value) => setFilters({ ...filters, minRating: value })}\n                >\n                  <SelectTrigger data-testid=\"select-min-rating\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {ratings.map((rating) => (\n                      <SelectItem key={rating.value} value={rating.value}>\n                        <div className=\"flex items-center space-x-1\">\n                          <span>{rating.label}</span>\n                          {rating.value !== \"all\" && (\n                            <Star className=\"h-3 w-3 fill-amber-400 text-amber-400\" />\n                          )}\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Sort By</Label>\n                <Select \n                  value={filters.sortBy} \n                  onValueChange={(value) => setFilters({ ...filters, sortBy: value })}\n                >\n                  <SelectTrigger data-testid=\"select-sort-by\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"relevance\">Relevance</SelectItem>\n                    <SelectItem value=\"newest\">Newest First</SelectItem>\n                    <SelectItem value=\"oldest\">Oldest First</SelectItem>\n                    <SelectItem value=\"rating\">Highest Rated</SelectItem>\n                    <SelectItem value=\"downloads\">Most Downloaded</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button variant=\"outline\" onClick={clearFilters} data-testid=\"button-reset-filters\">\n                Reset\n              </Button>\n              <Button onClick={handleSearch} data-testid=\"button-apply-filters\">\n                Apply Filters\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Active Filters Display */}\n      {activeFiltersCount > 0 && (\n        <div className=\"flex flex-wrap gap-2\">\n          {filters.subject !== \"All Subjects\" && (\n            <Badge variant=\"secondary\" className=\"flex items-center gap-1\" data-testid=\"active-filter-subject\">\n              Subject: {filters.subject}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"h-3 w-3 p-0\"\n                onClick={() => setFilters({ ...filters, subject: \"All Subjects\" })}\n              >\n                <X className=\"h-2 w-2\" />\n              </Button>\n            </Badge>\n          )}\n          {filters.semester !== \"All Semesters\" && (\n            <Badge variant=\"secondary\" className=\"flex items-center gap-1\" data-testid=\"active-filter-semester\">\n              Semester: {filters.semester}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"h-3 w-3 p-0\"\n                onClick={() => setFilters({ ...filters, semester: \"All Semesters\" })}\n              >\n                <X className=\"h-2 w-2\" />\n              </Button>\n            </Badge>\n          )}\n          {filters.fileTypes.map((fileType) => (\n            <Badge key={fileType} variant=\"secondary\" className=\"flex items-center gap-1\" data-testid={`active-filter-filetype-${fileType}`}>\n              {fileTypes.find(f => f.id === fileType)?.label}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"h-3 w-3 p-0\"\n                onClick={() => toggleFileType(fileType)}\n              >\n                <X className=\"h-2 w-2\" />\n              </Button>\n            </Badge>\n          ))}\n          {filters.minRating !== \"all\" && (\n            <Badge variant=\"secondary\" className=\"flex items-center gap-1\" data-testid=\"active-filter-rating\">\n              {ratings.find(r => r.value === filters.minRating)?.label}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"h-3 w-3 p-0\"\n                onClick={() => setFilters({ ...filters, minRating: \"all\" })}\n              >\n                <X className=\"h-2 w-2\" />\n              </Button>\n            </Badge>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":11560},"client/src/components/UploadResource.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Upload, X, FileText, File, LogIn } from \"lucide-react\";\n\nconst subjects = [\n  \"Mathematics\", \"Computer Science\", \"Physics\", \"Chemistry\", \"Biology\", \n  \"Economics\", \"Psychology\", \"History\", \"Literature\", \"Engineering\"\n];\n\nconst semesters = [\n  \"Fall 2024\", \"Spring 2024\", \"Fall 2023\", \"Spring 2023\", \"Fall 2022\", \"Spring 2022\"\n];\n\nexport default function UploadResource() {\n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    subject: \"\",\n    semester: \"\",\n    tags: [] as string[],\n    currentTag: \"\"\n  });\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [dragActive, setDragActive] = useState(false);\n  const { toast } = useToast();\n  const { user, isAuthenticated } = useAuth();\n  \n  // Show login prompt for unauthenticated users\n  if (!isAuthenticated) {\n    return (\n      <div className=\"max-w-2xl mx-auto space-y-6\">\n        <div className=\"text-center space-y-4\">\n          <LogIn className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n          <div>\n            <h1 className=\"text-2xl font-medium text-foreground\">Authentication Required</h1>\n            <p className=\"text-muted-foreground\">\n              Please log in to upload and share study materials\n            </p>\n          </div>\n          <Button \n            onClick={() => window.location.href = '/auth/login'}\n            data-testid=\"button-login\"\n          >\n            <LogIn className=\"mr-2 h-4 w-4\" />\n            Log In\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.size > 10 * 1024 * 1024) { // 10MB limit\n        toast({\n          title: \"File too large\",\n          description: \"Please select a file smaller than 10MB.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      setSelectedFile(file);\n    }\n  };\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    const file = e.dataTransfer.files?.[0];\n    if (file) {\n      if (file.size > 10 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: \"Please select a file smaller than 10MB.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      setSelectedFile(file);\n    }\n  };\n\n  const addTag = () => {\n    if (formData.currentTag.trim() && !formData.tags.includes(formData.currentTag.trim())) {\n      setFormData({\n        ...formData,\n        tags: [...formData.tags, formData.currentTag.trim()],\n        currentTag: \"\"\n      });\n    }\n  };\n\n  const removeTag = (tagToRemove: string) => {\n    setFormData({\n      ...formData,\n      tags: formData.tags.filter(tag => tag !== tagToRemove)\n    });\n  };\n\n  // Mutation for uploading resource with file\n  const uploadMutation = useMutation({\n    mutationFn: async ({ formData, file }: { formData: any, file: File }) => {\n      const uploadFormData = new FormData();\n      \n      // Add the file\n      uploadFormData.append('file', file);\n      \n      // Add metadata\n      uploadFormData.append('title', formData.title.trim());\n      uploadFormData.append('subject', formData.subject.trim());\n      if (formData.description.trim()) {\n        uploadFormData.append('description', formData.description.trim());\n      }\n      if (formData.semester.trim()) {\n        uploadFormData.append('semester', formData.semester.trim());\n      }\n      if (formData.tags.length > 0) {\n        uploadFormData.append('tags', JSON.stringify(formData.tags));\n      }\n      \n      const response = await fetch('/api/resources', {\n        method: 'POST',\n        body: uploadFormData,\n        credentials: 'include', // Include session cookies\n      });\n      \n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error || 'Upload failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Invalidate resources queries to refresh the lists\n      queryClient.invalidateQueries({ queryKey: ['/api/resources'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n      \n      toast({\n        title: \"Resource uploaded!\",\n        description: \"Your resource has been shared with the community.\",\n      });\n      \n      // Reset form\n      setFormData({ title: \"\", description: \"\", subject: \"\", semester: \"\", tags: [], currentTag: \"\" });\n      setSelectedFile(null);\n      \n      console.log(\"Resource created:\", data);\n    },\n    onError: (error: any) => {\n      console.error(\"Upload error:\", error);\n      toast({\n        title: \"Upload failed\",\n        description: error.message || \"Could not upload the resource. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedFile) {\n      toast({\n        title: \"No file selected\",\n        description: \"Please select a file to upload.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Validate required fields\n    if (!formData.title.trim() || !formData.subject.trim()) {\n      toast({\n        title: \"Missing required fields\",\n        description: \"Please fill in the title and subject.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    uploadMutation.mutate({ formData, file: selectedFile });\n  };\n\n  const getFileIcon = (fileName: string) => {\n    const extension = fileName.split('.').pop()?.toLowerCase();\n    switch (extension) {\n      case 'pdf':\n        return <FileText className=\"h-8 w-8 text-red-600\" />;\n      case 'docx':\n      case 'doc':\n        return <File className=\"h-8 w-8 text-blue-600\" />;\n      default:\n        return <File className=\"h-8 w-8 text-muted-foreground\" />;\n    }\n  };\n\n  return (\n    <div className=\"max-w-2xl mx-auto space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-medium text-foreground\">Upload Resource</h1>\n        <p className=\"text-muted-foreground\">Share your study materials with fellow students</p>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        {/* File Upload */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Select File</CardTitle>\n            <CardDescription>Upload PDF, Word documents, or images (max 10MB)</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {!selectedFile ? (\n              <div\n                className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n                  dragActive ? \"border-primary bg-primary/5\" : \"border-muted-foreground/25\"\n                }`}\n                onDragEnter={handleDrag}\n                onDragLeave={handleDrag}\n                onDragOver={handleDrag}\n                onDrop={handleDrop}\n              >\n                <Upload className=\"mx-auto h-8 w-8 text-muted-foreground mb-4\" />\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Drag and drop your file here, or click to browse\n                </p>\n                <input\n                  type=\"file\"\n                  id=\"file-upload\"\n                  className=\"hidden\"\n                  accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\n                  onChange={handleFileChange}\n                  data-testid=\"input-file\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => document.getElementById('file-upload')?.click()}\n                  data-testid=\"button-browse-file\"\n                >\n                  Browse Files\n                </Button>\n              </div>\n            ) : (\n              <div className=\"flex items-center space-x-4 p-4 bg-muted rounded-lg\">\n                {getFileIcon(selectedFile.name)}\n                <div className=\"flex-1\">\n                  <p className=\"font-medium\" data-testid=\"selected-filename\">{selectedFile.name}</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {(selectedFile.size / 1024 / 1024).toFixed(2)} MB\n                  </p>\n                </div>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => setSelectedFile(null)}\n                  data-testid=\"button-remove-file\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Resource Details */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Resource Details</CardTitle>\n            <CardDescription>Provide information to help others find your resource</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"title\">Title *</Label>\n              <Input\n                id=\"title\"\n                placeholder=\"Enter a descriptive title\"\n                value={formData.title}\n                onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                data-testid=\"input-title\"\n                required\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                placeholder=\"Describe what this resource covers...\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                data-testid=\"textarea-description\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label>Subject *</Label>\n                <Select \n                  value={formData.subject} \n                  onValueChange={(value) => setFormData({ ...formData, subject: value })}\n                  required\n                >\n                  <SelectTrigger data-testid=\"select-subject\">\n                    <SelectValue placeholder=\"Select subject\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {subjects.map((subject) => (\n                      <SelectItem key={subject} value={subject}>\n                        {subject}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Semester</Label>\n                <Select \n                  value={formData.semester} \n                  onValueChange={(value) => setFormData({ ...formData, semester: value })}\n                >\n                  <SelectTrigger data-testid=\"select-semester\">\n                    <SelectValue placeholder=\"Select semester\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {semesters.map((semester) => (\n                      <SelectItem key={semester} value={semester}>\n                        {semester}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>Tags</Label>\n              <div className=\"flex space-x-2\">\n                <Input\n                  placeholder=\"Add tags (e.g., midterm, notes, solutions)\"\n                  value={formData.currentTag}\n                  onChange={(e) => setFormData({ ...formData, currentTag: e.target.value })}\n                  onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addTag())}\n                  data-testid=\"input-tag\"\n                />\n                <Button type=\"button\" variant=\"outline\" onClick={addTag} data-testid=\"button-add-tag\">\n                  Add\n                </Button>\n              </div>\n              {formData.tags.length > 0 && (\n                <div className=\"flex flex-wrap gap-2 mt-2\">\n                  {formData.tags.map((tag, index) => (\n                    <Badge \n                      key={index} \n                      variant=\"secondary\" \n                      className=\"flex items-center gap-1\"\n                      data-testid={`tag-${tag.toLowerCase().replace(' ', '-')}`}\n                    >\n                      {tag}\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-3 w-3 p-0 hover:bg-destructive hover:text-destructive-foreground\"\n                        onClick={() => removeTag(tag)}\n                        data-testid={`button-remove-tag-${tag.toLowerCase().replace(' ', '-')}`}\n                      >\n                        <X className=\"h-2 w-2\" />\n                      </Button>\n                    </Badge>\n                  ))}\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"flex gap-4\">\n          <Button \n            type=\"submit\" \n            className=\"flex-1\" \n            disabled={uploadMutation.isPending}\n            data-testid=\"button-upload\"\n          >\n            <Upload className=\"mr-2 h-4 w-4\" />\n            {uploadMutation.isPending ? \"Uploading...\" : \"Upload Resource\"}\n          </Button>\n          <Button \n            type=\"button\" \n            variant=\"outline\" \n            disabled={uploadMutation.isPending}\n            onClick={() => {\n              setFormData({ title: \"\", description: \"\", subject: \"\", semester: \"\", tags: [], currentTag: \"\" });\n              setSelectedFile(null);\n            }}\n            data-testid=\"button-cancel\"\n          >\n            Cancel\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}","size_bytes":14947},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AppSidebar.tsx":{"content":"import { SidebarProvider } from \"@/components/ui/sidebar\";\nimport AppSidebar from '../AppSidebar';\n\nexport default function AppSidebarExample() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar \n          activeItem=\"/\"\n          onNavigate={(path) => console.log('Navigate to:', path)}\n        />\n        <div className=\"flex-1 p-8 bg-background\">\n          <div className=\"max-w-2xl\">\n            <h2 className=\"text-2xl font-medium mb-4\">Main Content Area</h2>\n            <p className=\"text-muted-foreground\">\n              This shows how the sidebar works alongside the main content. \n              Click on sidebar items to see navigation in action.\n            </p>\n          </div>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}","size_bytes":926},"client/src/components/examples/AuthForm.tsx":{"content":"import AuthForm from '../AuthForm';\n\nexport default function AuthFormExample() {\n  return <AuthForm />;\n}","size_bytes":105},"client/src/components/examples/Dashboard.tsx":{"content":"import Dashboard from '../Dashboard';\n\nexport default function DashboardExample() {\n  return <Dashboard />;\n}","size_bytes":109},"client/src/components/examples/Header.tsx":{"content":"import { useState } from 'react';\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\nimport Header from '../Header';\n\nexport default function HeaderExample() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <SidebarProvider>\n      <div className=\"min-h-screen w-full\">\n        <Header \n          theme={theme}\n          onThemeToggle={toggleTheme}\n          onSearch={(query) => console.log('Search:', query)}\n          userName=\"John Doe\"\n          userInitials=\"JD\"\n          notificationCount={5}\n        />\n        <div className=\"p-8\">\n          <div className=\"max-w-4xl\">\n            <h2 className=\"text-2xl font-medium mb-4\">Page Content</h2>\n            <p className=\"text-muted-foreground mb-4\">\n              This demonstrates the header component with search functionality, \n              theme toggle, notifications, and user menu.\n            </p>\n            <p className=\"text-sm text-muted-foreground\">\n              Try searching, toggling the theme, or clicking the user avatar to see the dropdown.\n            </p>\n          </div>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}","size_bytes":1239},"client/src/components/examples/RatingSystem.tsx":{"content":"import RatingSystem from '../RatingSystem';\n\nexport default function RatingSystemExample() {\n  return (\n    <div className=\"p-8 space-y-6\">\n      <div>\n        <h3 className=\"text-lg font-medium mb-2\">Interactive Rating (Medium)</h3>\n        <RatingSystem \n          rating={3.5} \n          onRating={(rating) => console.log('New rating:', rating)} \n        />\n      </div>\n      \n      <div>\n        <h3 className=\"text-lg font-medium mb-2\">Readonly Rating (Small)</h3>\n        <RatingSystem \n          rating={4.8} \n          size=\"sm\"\n          readonly\n        />\n      </div>\n      \n      <div>\n        <h3 className=\"text-lg font-medium mb-2\">Large Interactive Rating</h3>\n        <RatingSystem \n          rating={2} \n          size=\"lg\"\n          onRating={(rating) => console.log('Large rating:', rating)} \n        />\n      </div>\n    </div>\n  );\n}","size_bytes":856},"client/src/components/examples/ResourceCard.tsx":{"content":"import ResourceCard from '../ResourceCard';\n\nconst mockResource = {\n  id: \"1\",\n  title: \"Advanced Calculus Notes - Chapter 7\",\n  description: \"Comprehensive notes covering differential equations and integration techniques with detailed examples and practice problems\",\n  subject: \"Mathematics\",\n  semester: \"Fall 2024\",\n  fileType: \"PDF\",\n  rating: 4.9,\n  downloads: 234,\n  uploadedBy: \"Sarah Chen\",\n  uploadedAt: \"2 hours ago\",\n};\n\nexport default function ResourceCardExample() {\n  return <ResourceCard resource={mockResource} />;\n}","size_bytes":533},"client/src/components/examples/SearchFilters.tsx":{"content":"import SearchFilters from '../SearchFilters';\n\nexport default function SearchFiltersExample() {\n  return (\n    <SearchFilters \n      onSearch={(filters) => console.log('Search filters applied:', filters)} \n    />\n  );\n}","size_bytes":219},"client/src/components/examples/UploadResource.tsx":{"content":"import UploadResource from '../UploadResource';\n\nexport default function UploadResourceExample() {\n  return <UploadResource />;\n}","size_bytes":129},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/Home.tsx":{"content":"import Dashboard from \"./Dashboard\";\n\nexport default function Home() {\n  // Use the existing Dashboard component as the home page\n  return <Dashboard />;\n}","size_bytes":155},"client/src/components/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { GraduationCap, Upload, Download, Star, Users, BookOpen } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <GraduationCap className=\"h-8 w-8 text-primary\" />\n            <h1 className=\"text-2xl font-bold\">College Resource Hub</h1>\n          </div>\n          <Button \n            onClick={() => window.location.href = '/api/login'}\n            data-testid=\"button-login\"\n          >\n            Sign In\n          </Button>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"relative py-20 px-4\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/10 via-background to-background\"></div>\n        <div className=\"container mx-auto text-center relative\">\n          <h2 className=\"text-5xl font-bold mb-6 bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent\">\n            Share Knowledge,<br />Excel Together\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Access thousands of study materials, share your knowledge, and collaborate with fellow students. \n            Join the largest student resource community.\n          </p>\n          <Button \n            size=\"lg\" \n            className=\"px-8 py-3 text-lg\"\n            onClick={() => window.location.href = '/api/login'}\n            data-testid=\"button-get-started\"\n          >\n            Get Started Free\n          </Button>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-16 px-4\">\n        <div className=\"container mx-auto\">\n          <h3 className=\"text-3xl font-bold text-center mb-12\">Everything you need to succeed</h3>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card className=\"text-center\">\n              <CardHeader>\n                <Upload className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                <CardTitle>Upload & Share</CardTitle>\n                <CardDescription>\n                  Share your notes, assignments, and study materials with the community\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"text-center\">\n              <CardHeader>\n                <Download className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                <CardTitle>Download Resources</CardTitle>\n                <CardDescription>\n                  Access thousands of high-quality study materials from your peers\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"text-center\">\n              <CardHeader>\n                <Star className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n                <CardTitle>Rate & Review</CardTitle>\n                <CardDescription>\n                  Help others find the best resources with ratings and reviews\n                </CardDescription>\n              </CardHeader>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"bg-muted/50 py-16 px-4\">\n        <div className=\"container mx-auto\">\n          <div className=\"grid md:grid-cols-3 gap-8 text-center\">\n            <div>\n              <div className=\"text-4xl font-bold text-primary mb-2\">10,000+</div>\n              <div className=\"text-lg text-muted-foreground\">Study Resources</div>\n            </div>\n            <div>\n              <div className=\"text-4xl font-bold text-primary mb-2\">5,000+</div>\n              <div className=\"text-lg text-muted-foreground\">Active Students</div>\n            </div>\n            <div>\n              <div className=\"text-4xl font-bold text-primary mb-2\">50+</div>\n              <div className=\"text-lg text-muted-foreground\">Universities</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 px-4\">\n        <div className=\"container mx-auto text-center\">\n          <h3 className=\"text-3xl font-bold mb-4\">Ready to start learning?</h3>\n          <p className=\"text-xl text-muted-foreground mb-8\">\n            Join thousands of students sharing knowledge and excelling together.\n          </p>\n          <Button \n            size=\"lg\"\n            onClick={() => window.location.href = '/api/login'}\n            data-testid=\"button-join-now\"\n          >\n            Join Now - It's Free\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t py-8 px-4\">\n        <div className=\"container mx-auto text-center text-muted-foreground\">\n          <p>&copy; 2024 College Resource Hub. Built for students, by students.</p>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":5118},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    // Refetch on window focus to catch auth state changes\n    refetchOnWindowFocus: true,\n    // Set a short stale time to ensure fresh auth checks\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Invalidate auth query when the component first mounts\n  // This ensures fresh auth state after page reloads/redirects\n  useEffect(() => {\n    const invalidateAuth = () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    };\n    \n    // Invalidate on mount\n    invalidateAuth();\n    \n    // Also invalidate when window gains focus (e.g., after OAuth redirect)\n    window.addEventListener('focus', invalidateAuth);\n    \n    return () => {\n      window.removeEventListener('focus', invalidateAuth);\n    };\n  }, []);\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    error,\n  };\n}","size_bytes":1096},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  \n  // Only use secure cookies in production/HTTPS environments\n  const isProduction = process.env.NODE_ENV === 'production';\n  \n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: isProduction, // Only secure in production\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":4387}},"version":1}